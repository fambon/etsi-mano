/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.24).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.ubiqube.etsi.mano.em.v331.controller.vnflcm;

import java.io.IOException;
import java.util.List;
import java.util.Optional;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.ubiqube.etsi.mano.em.v331.model.vnflcm.ChangeCurrentVnfPkgRequest;
import com.ubiqube.etsi.mano.em.v331.model.vnflcm.ChangeExtVnfConnectivityRequest;
import com.ubiqube.etsi.mano.em.v331.model.vnflcm.ChangeVnfFlavourRequest;
import com.ubiqube.etsi.mano.em.v331.model.vnflcm.CreateVnfRequest;
import com.ubiqube.etsi.mano.em.v331.model.vnflcm.CreateVnfSnapshotRequest;
import com.ubiqube.etsi.mano.em.v331.model.vnflcm.HealVnfRequest;
import com.ubiqube.etsi.mano.em.v331.model.vnflcm.InstantiateVnfRequest;
import com.ubiqube.etsi.mano.em.v331.model.vnflcm.OperateVnfRequest;
import com.ubiqube.etsi.mano.em.v331.model.vnflcm.ProblemDetails;
import com.ubiqube.etsi.mano.em.v331.model.vnflcm.RevertToVnfSnapshotRequest;
import com.ubiqube.etsi.mano.em.v331.model.vnflcm.ScaleVnfRequest;
import com.ubiqube.etsi.mano.em.v331.model.vnflcm.ScaleVnfToLevelRequest;
import com.ubiqube.etsi.mano.em.v331.model.vnflcm.TerminateVnfRequest;
import com.ubiqube.etsi.mano.em.v331.model.vnflcm.VnfIdentifierDeletionNotification;
import com.ubiqube.etsi.mano.em.v331.model.vnflcm.VnfInfoModificationRequest;
import com.ubiqube.etsi.mano.em.v331.model.vnflcm.VnfInstance;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;

public interface VnfInstancesApi {

	Logger log = LoggerFactory.getLogger(VnfInstancesApi.class);

	default Optional<ObjectMapper> getObjectMapper() {
		return Optional.empty();
	}

	default Optional<HttpServletRequest> getRequest() {
		return Optional.empty();
	}

	default Optional<String> getAcceptHeader() {
		return getRequest().map(r -> r.getHeader("Accept"));
	}

	@Operation(summary = "", description = "The GET method queries information about multiple VNF instances. ", tags = {})
	@ApiResponses(value = {
			@ApiResponse(responseCode = "200", description = "200 OK Information about zero or more VNF instances has been queried successfully. The response body shall contain in an array the representations of zero or more VNF instances. ", content = @Content(array = @ArraySchema(schema = @Schema(implementation = VnfInstance.class)))),

			@ApiResponse(responseCode = "400", description = "400 BAD REQUEST 400 code can be returned in the following specified cases, the specific cause has to be proper specified in the \"ProblemDetails\" structure to be returned. If the request is malformed or syntactically incorrect (e.g. if the request URI contains incorrect query parameters or the payload body contains a syntactically incorrect data structure), the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and should include in the \"detail\" attribute more information about the source of the problem. If the response to a GET request which queries a container resource would be so big that the performance of the API producer is adversely affected, and the API producer does not support paging for the affected resource, it shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and should include in the \"detail\" attribute more information about the source of the problem. If there is an application error related to the client's input that cannot be easily mapped to any other HTTP response code (\"catch all error\"), the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and shall include in the \"detail\" attribute more information about the source of the problem. If the request contains a malformed access token, the API producer should respond with this response. The details of the error shall be returned in the WWW Authenticate HTTP header, as defined in IETF RFC 6750 and IETF RFC 7235. The ProblemDetails structure may be provided. The use of this HTTP error response code described above is applicable to the use of the OAuth 2.0 for the authorization of API requests and notifications, as defined in clauses 4.5.3.3 and 4.5.3.4. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "401", description = "401 UNAUTHORIZED If the request contains no access token even though one is required, or if the request contains an authorization token that is invalid (e.g. expired or revoked), the API producer should respond with this response. The details of the error shall be returned in the WWW-Authenticate HTTP header, as defined in IETF RFC 6750 and IETF RFC 7235. The ProblemDetails structure may be provided. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "403", description = "403 FORBIDDEN If the API consumer is not allowed to perform a particular request to a particular resource, the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided. It should include in the \"detail\" attribute information about the source of the problem, and may indicate how to solve it. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "404", description = "404 NOT FOUND If the API producer did not find a current representation for the resource addressed by the URI passed in the request or is not willing to disclose that one exists, it shall respond with this response code. The \"ProblemDetails\" structure may be provided, including in the \"detail\" attribute information about the source of the problem, e.g. a wrong resource URI variable. This response code is not appropriate in case the resource addressed by the URI is a container resource which is designed to contain child resources, but does not contain any child resource at the time the request is received. For a GET request to an existing empty container resource, a typical response contains a 200 OK response code and a payload body with an empty array. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "405", description = "405 METHOD NOT ALLOWED If a particular HTTP method is not supported for a particular resource, the API producer shall respond with this response code. The \"ProblemDetails\" structure may be omitted. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "406", description = "406 NOT ACCEPTABLE If the \"Accept\" HTTP header does not contain at least one name of a content type that is acceptable to the API producer, the API producer shall respond with this response code. The \"ProblemDetails\" structure may be omitted. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "416", description = "416 Range Not Satisfiable ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "422", description = "422 UNPROCESSABLE ENTITY If the payload body of a request contains syntactically correct data (e.g. well-formed JSON) but the data cannot be processed (e.g. because it fails validation against a schema), the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and should include in the \"detail\" attribute more information about the source of the problem. This error response code is only applicable for methods that have a request body. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "429", description = "429 TOO MANY REQUESTS If the API consumer has sent too many requests in a defined period of time and the API producer is able to detect that condition (\"rate limiting\"), the API producer shall respond with this response code, following the provisions in IETF RFC 6585 [17] for the use of the \"Retry-After\" HTTP header. The \"ProblemDetails\" structure shall be provided and shall include in the \"detail\" attribute more information about the source of the problem. The period of time and allowed number of requests are configured within the API producer by means outside the scope of the present document. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "500", description = "500 INTERNAL SERVER ERROR If there is an application error not related to the client's input that cannot be easily mapped to any other HTTP response code (\"catch all error\"), the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and shall include in the \"detail\" attribute more information about the source of the problem. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "503", description = "503 SERVICE UNAVAILABLE If the API producer encounters an internal overload situation of itself or of a system it relies on, it should respond with this response code, following the provisions in IETF RFC 7231 for the use of the \"Retry-After\" HTTP header and for the alternative to refuse the connection. The \"ProblemDetails\" structure may be omitted. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "504", description = "504 GATEWAY TIMEOUT If the API producer encounters a timeout while waiting for a response from an upstream server (i.e. a server that the API producer communicates with when fulfilling a request), it should respond with this response code. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))) })
	@RequestMapping(value = "/vnf_instances", produces = { "application/json" }, method = RequestMethod.GET)
	default ResponseEntity<List<VnfInstance>> vnfInstancesGet(@Parameter(in = ParameterIn.HEADER, description = "Version of the API requested to use when responding to this request. ", required = true, schema = @Schema()) @RequestHeader(value = "Version", required = true) final String version, @Parameter(in = ParameterIn.HEADER, description = "Content-Types that are acceptable for the response. Reference: IETF RFC 7231. ", required = true, schema = @Schema()) @RequestHeader(value = "Accept", required = true) final String accept, @Parameter(in = ParameterIn.HEADER, description = "The authorization token for the request. Reference: IETF RFC 7235. ", schema = @Schema()) @RequestHeader(value = "Authorization", required = false) final String authorization,
			@Parameter(in = ParameterIn.QUERY, description = "Attribute-based filtering expression according to clause 5.2 of ETSI GS NFV-SOL 013. The NFV-MANO functional entity shall support receiving this parameter as part of the URI query string. The API consumer may supply this parameter. All attribute names that appear in the FmSubscription and in data types referenced from it shall be supported by the NFV-MANO functional entity in the filter expression. ", schema = @Schema()) @Valid @RequestParam(value = "filter", required = false) final String filter, @Parameter(in = ParameterIn.QUERY, description = "Include all complex attributes in the response. See clause 5.3 of ETSI GS NFV-SOL 013. The NFV-MANO functional entity shall support this parameter. ", schema = @Schema()) @Valid @RequestParam(value = "all_fields", required = false) final String allFields, @Parameter(in = ParameterIn.QUERY, description = "Complex attributes to be included into the response. See clause 5.3 of ETSI GS NFV-SOL 013 for details. The NFV-MANO functional entity should support this parameter. ", schema = @Schema()) @Valid @RequestParam(value = "fields", required = false) final String fields,
			@Parameter(in = ParameterIn.QUERY, description = "Complex attributes to be excluded from the response. See clause 5.3 of ETSI GS NFV-SOL 013 for details. The NFV-MANO functional entity should support this parameter. ", schema = @Schema()) @Valid @RequestParam(value = "exclude_fields", required = false) final String excludeFields, @Parameter(in = ParameterIn.QUERY, description = "Indicates to exclude the following complex attributes from the response. See clause 5.3 of ETSI GS NFV-SOL 013 for details. The NFV-MANO functional entity shall support this parameter.", schema = @Schema()) @Valid @RequestParam(value = "exclude_default", required = false) final String excludeDefault, @Parameter(in = ParameterIn.QUERY, description = "Marker to obtain the next page of a paged response. Shall be supported by the NFV-MANO functional entity if the entity supports alternative 2 (paging) according to clause 5.4.2.1 of ETSI GS NFV-SOL 013 for this resource. ", schema = @Schema()) @Valid @RequestParam(value = "nextpage_opaque_marker", required = false) final String nextpageOpaqueMarker) {
		if (getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
			if (getAcceptHeader().get().contains("application/json")) {
				try {
					return new ResponseEntity<>(getObjectMapper().get().readValue(
							"[ {\n  \"vnfProductName\" : \"vnfProductName\",\n  \"vnfProvider\" : \"vnfProvider\",\n  \"_links\" : {\n    \"self\" : {\n      \"href\" : \"href\"\n    }\n  },\n  \"vnfConfigurableProperties\" : { },\n  \"instantiationState\" : \"NOT_INSTANTIATED\",\n  \"vnfInstanceDescription\" : \"vnfInstanceDescription\",\n  \"instantiatedVnfInfo\" : {\n    \"flavourId\" : \"flavourId\",\n    \"scaleStatus\" : [ {\n      \"scaleLevel\" : 0\n    }, {\n      \"scaleLevel\" : 0\n    } ],\n    \"extManagedVirtualLinkInfo\" : [ {\n      \"vnfLinkPorts\" : [ {\n        \"cpInstanceType\" : \"VNFC_CP\"\n      }, {\n        \"cpInstanceType\" : \"VNFC_CP\"\n      } ]\n    }, {\n      \"vnfLinkPorts\" : [ {\n        \"cpInstanceType\" : \"VNFC_CP\"\n      }, {\n        \"cpInstanceType\" : \"VNFC_CP\"\n      } ]\n    } ],\n    \"maxScaleLevels\" : [ null, null ],\n    \"vnfState\" : \"STARTED\",\n    \"monitoringParameters\" : [ {\n      \"name\" : \"name\",\n      \"performanceMetric\" : \"performanceMetric\"\n    }, {\n      \"name\" : \"name\",\n      \"performanceMetric\" : \"performanceMetric\"\n    } ],\n    \"vnfVirtualStorageResourceInfo\" : [ { }, { } ],\n    \"extVirtualLinkInfo\" : [ {\n      \"resourceHandle\" : {\n        \"vimLevelResourceType\" : \"vimLevelResourceType\"\n      },\n      \"extLinkPorts\" : [ { }, { } ],\n      \"currentVnfExtCpData\" : [ {\n        \"cpConfig\" : {\n          \"key\" : {\n            \"cpProtocolData\" : [ {\n              \"ipOverEthernet\" : {\n                \"ipAddresses\" : [ {\n                  \"fixedAddresses\" : [ null, null ],\n                  \"addressRange\" : { },\n                  \"type\" : \"IPV4\",\n                  \"numDynamicAddresses\" : 6\n                }, {\n                  \"fixedAddresses\" : [ null, null ],\n                  \"addressRange\" : { },\n                  \"type\" : \"IPV4\",\n                  \"numDynamicAddresses\" : 6\n                } ],\n                \"segmentationId\" : \"segmentationId\"\n              },\n              \"layerProtocol\" : \"IP_OVER_ETHERNET\"\n            }, {\n              \"ipOverEthernet\" : {\n                \"ipAddresses\" : [ {\n                  \"fixedAddresses\" : [ null, null ],\n                  \"addressRange\" : { },\n                  \"type\" : \"IPV4\",\n                  \"numDynamicAddresses\" : 6\n                }, {\n                  \"fixedAddresses\" : [ null, null ],\n                  \"addressRange\" : { },\n                  \"type\" : \"IPV4\",\n                  \"numDynamicAddresses\" : 6\n                } ],\n                \"segmentationId\" : \"segmentationId\"\n              },\n              \"layerProtocol\" : \"IP_OVER_ETHERNET\"\n            } ]\n          }\n        }\n      }, {\n        \"cpConfig\" : {\n          \"key\" : {\n            \"cpProtocolData\" : [ {\n              \"ipOverEthernet\" : {\n                \"ipAddresses\" : [ {\n                  \"fixedAddresses\" : [ null, null ],\n                  \"addressRange\" : { },\n                  \"type\" : \"IPV4\",\n                  \"numDynamicAddresses\" : 6\n                }, {\n                  \"fixedAddresses\" : [ null, null ],\n                  \"addressRange\" : { },\n                  \"type\" : \"IPV4\",\n                  \"numDynamicAddresses\" : 6\n                } ],\n                \"segmentationId\" : \"segmentationId\"\n              },\n              \"layerProtocol\" : \"IP_OVER_ETHERNET\"\n            }, {\n              \"ipOverEthernet\" : {\n                \"ipAddresses\" : [ {\n                  \"fixedAddresses\" : [ null, null ],\n                  \"addressRange\" : { },\n                  \"type\" : \"IPV4\",\n                  \"numDynamicAddresses\" : 6\n                }, {\n                  \"fixedAddresses\" : [ null, null ],\n                  \"addressRange\" : { },\n                  \"type\" : \"IPV4\",\n                  \"numDynamicAddresses\" : 6\n                } ],\n                \"segmentationId\" : \"segmentationId\"\n              },\n              \"layerProtocol\" : \"IP_OVER_ETHERNET\"\n            } ]\n          }\n        }\n      } ]\n    }, {\n      \"resourceHandle\" : {\n        \"vimLevelResourceType\" : \"vimLevelResourceType\"\n      },\n      \"extLinkPorts\" : [ { }, { } ],\n      \"currentVnfExtCpData\" : [ {\n        \"cpConfig\" : {\n          \"key\" : {\n            \"cpProtocolData\" : [ {\n              \"ipOverEthernet\" : {\n                \"ipAddresses\" : [ {\n                  \"fixedAddresses\" : [ null, null ],\n                  \"addressRange\" : { },\n                  \"type\" : \"IPV4\",\n                  \"numDynamicAddresses\" : 6\n                }, {\n                  \"fixedAddresses\" : [ null, null ],\n                  \"addressRange\" : { },\n                  \"type\" : \"IPV4\",\n                  \"numDynamicAddresses\" : 6\n                } ],\n                \"segmentationId\" : \"segmentationId\"\n              },\n              \"layerProtocol\" : \"IP_OVER_ETHERNET\"\n            }, {\n              \"ipOverEthernet\" : {\n                \"ipAddresses\" : [ {\n                  \"fixedAddresses\" : [ null, null ],\n                  \"addressRange\" : { },\n                  \"type\" : \"IPV4\",\n                  \"numDynamicAddresses\" : 6\n                }, {\n                  \"fixedAddresses\" : [ null, null ],\n                  \"addressRange\" : { },\n                  \"type\" : \"IPV4\",\n                  \"numDynamicAddresses\" : 6\n                } ],\n                \"segmentationId\" : \"segmentationId\"\n              },\n              \"layerProtocol\" : \"IP_OVER_ETHERNET\"\n            } ]\n          }\n        }\n      }, {\n        \"cpConfig\" : {\n          \"key\" : {\n            \"cpProtocolData\" : [ {\n              \"ipOverEthernet\" : {\n                \"ipAddresses\" : [ {\n                  \"fixedAddresses\" : [ null, null ],\n                  \"addressRange\" : { },\n                  \"type\" : \"IPV4\",\n                  \"numDynamicAddresses\" : 6\n                }, {\n                  \"fixedAddresses\" : [ null, null ],\n                  \"addressRange\" : { },\n                  \"type\" : \"IPV4\",\n                  \"numDynamicAddresses\" : 6\n                } ],\n                \"segmentationId\" : \"segmentationId\"\n              },\n              \"layerProtocol\" : \"IP_OVER_ETHERNET\"\n            }, {\n              \"ipOverEthernet\" : {\n                \"ipAddresses\" : [ {\n                  \"fixedAddresses\" : [ null, null ],\n                  \"addressRange\" : { },\n                  \"type\" : \"IPV4\",\n                  \"numDynamicAddresses\" : 6\n                }, {\n                  \"fixedAddresses\" : [ null, null ],\n                  \"addressRange\" : { },\n                  \"type\" : \"IPV4\",\n                  \"numDynamicAddresses\" : 6\n                } ],\n                \"segmentationId\" : \"segmentationId\"\n              },\n              \"layerProtocol\" : \"IP_OVER_ETHERNET\"\n            } ]\n          }\n        }\n      } ]\n    } ],\n    \"localizationLanguage\" : \"localizationLanguage\",\n    \"vnfVirtualLinkResourceInfo\" : [ {\n      \"vnfLinkPorts\" : [ null, null ]\n    }, {\n      \"vnfLinkPorts\" : [ null, null ]\n    } ],\n    \"vnfcResourceInfo\" : [ {\n      \"storageResourceIds\" : [ null, null ],\n      \"vnfcCpInfo\" : [ {\n        \"cpProtocolInfo\" : [ null, null ]\n      }, {\n        \"cpProtocolInfo\" : [ null, null ]\n      } ]\n    }, {\n      \"storageResourceIds\" : [ null, null ],\n      \"vnfcCpInfo\" : [ {\n        \"cpProtocolInfo\" : [ null, null ]\n      }, {\n        \"cpProtocolInfo\" : [ null, null ]\n      } ]\n    } ],\n    \"extCpInfo\" : [ {\n      \"cpProtocolInfo\" : [ {\n        \"ipOverEthernet\" : {\n          \"macAddress\" : \"macAddress\",\n          \"ipAddresses\" : [ {\n            \"subnetId\" : \"subnetId\",\n            \"addresses\" : [ \"addresses\", \"addresses\" ],\n            \"isDynamic\" : true,\n            \"addressRange\" : { },\n            \"type\" : \"IPV4\"\n          }, {\n            \"subnetId\" : \"subnetId\",\n            \"addresses\" : [ \"addresses\", \"addresses\" ],\n            \"isDynamic\" : true,\n            \"addressRange\" : { },\n            \"type\" : \"IPV4\"\n          } ],\n          \"segmentationId\" : \"segmentationId\"\n        },\n        \"layerProtocol\" : \"IP_OVER_ETHERNET\"\n      }, {\n        \"ipOverEthernet\" : {\n          \"macAddress\" : \"macAddress\",\n          \"ipAddresses\" : [ {\n            \"subnetId\" : \"subnetId\",\n            \"addresses\" : [ \"addresses\", \"addresses\" ],\n            \"isDynamic\" : true,\n            \"addressRange\" : { },\n            \"type\" : \"IPV4\"\n          }, {\n            \"subnetId\" : \"subnetId\",\n            \"addresses\" : [ \"addresses\", \"addresses\" ],\n            \"isDynamic\" : true,\n            \"addressRange\" : { },\n            \"type\" : \"IPV4\"\n          } ],\n          \"segmentationId\" : \"segmentationId\"\n        },\n        \"layerProtocol\" : \"IP_OVER_ETHERNET\"\n      } ],\n      \"id\" : \"id\"\n    }, {\n      \"cpProtocolInfo\" : [ {\n        \"ipOverEthernet\" : {\n          \"macAddress\" : \"macAddress\",\n          \"ipAddresses\" : [ {\n            \"subnetId\" : \"subnetId\",\n            \"addresses\" : [ \"addresses\", \"addresses\" ],\n            \"isDynamic\" : true,\n            \"addressRange\" : { },\n            \"type\" : \"IPV4\"\n          }, {\n            \"subnetId\" : \"subnetId\",\n            \"addresses\" : [ \"addresses\", \"addresses\" ],\n            \"isDynamic\" : true,\n            \"addressRange\" : { },\n            \"type\" : \"IPV4\"\n          } ],\n          \"segmentationId\" : \"segmentationId\"\n        },\n        \"layerProtocol\" : \"IP_OVER_ETHERNET\"\n      }, {\n        \"ipOverEthernet\" : {\n          \"macAddress\" : \"macAddress\",\n          \"ipAddresses\" : [ {\n            \"subnetId\" : \"subnetId\",\n            \"addresses\" : [ \"addresses\", \"addresses\" ],\n            \"isDynamic\" : true,\n            \"addressRange\" : { },\n            \"type\" : \"IPV4\"\n          }, {\n            \"subnetId\" : \"subnetId\",\n            \"addresses\" : [ \"addresses\", \"addresses\" ],\n            \"isDynamic\" : true,\n            \"addressRange\" : { },\n            \"type\" : \"IPV4\"\n          } ],\n          \"segmentationId\" : \"segmentationId\"\n        },\n        \"layerProtocol\" : \"IP_OVER_ETHERNET\"\n      } ],\n      \"id\" : \"id\"\n    } ],\n    \"vnfcInfo\" : [ { }, { } ]\n  },\n  \"vnfInstanceName\" : \"vnfInstanceName\",\n  \"id\" : \"id\",\n  \"vnfSoftwareVersion\" : \"vnfSoftwareVersion\"\n}, {\n  \"vnfProductName\" : \"vnfProductName\",\n  \"vnfProvider\" : \"vnfProvider\",\n  \"_links\" : {\n    \"self\" : {\n      \"href\" : \"href\"\n    }\n  },\n  \"vnfConfigurableProperties\" : { },\n  \"instantiationState\" : \"NOT_INSTANTIATED\",\n  \"vnfInstanceDescription\" : \"vnfInstanceDescription\",\n  \"instantiatedVnfInfo\" : {\n    \"flavourId\" : \"flavourId\",\n    \"scaleStatus\" : [ {\n      \"scaleLevel\" : 0\n    }, {\n      \"scaleLevel\" : 0\n    } ],\n    \"extManagedVirtualLinkInfo\" : [ {\n      \"vnfLinkPorts\" : [ {\n        \"cpInstanceType\" : \"VNFC_CP\"\n      }, {\n        \"cpInstanceType\" : \"VNFC_CP\"\n      } ]\n    }, {\n      \"vnfLinkPorts\" : [ {\n        \"cpInstanceType\" : \"VNFC_CP\"\n      }, {\n        \"cpInstanceType\" : \"VNFC_CP\"\n      } ]\n    } ],\n    \"maxScaleLevels\" : [ null, null ],\n    \"vnfState\" : \"STARTED\",\n    \"monitoringParameters\" : [ {\n      \"name\" : \"name\",\n      \"performanceMetric\" : \"performanceMetric\"\n    }, {\n      \"name\" : \"name\",\n      \"performanceMetric\" : \"performanceMetric\"\n    } ],\n    \"vnfVirtualStorageResourceInfo\" : [ { }, { } ],\n    \"extVirtualLinkInfo\" : [ {\n      \"resourceHandle\" : {\n        \"vimLevelResourceType\" : \"vimLevelResourceType\"\n      },\n      \"extLinkPorts\" : [ { }, { } ],\n      \"currentVnfExtCpData\" : [ {\n        \"cpConfig\" : {\n          \"key\" : {\n            \"cpProtocolData\" : [ {\n              \"ipOverEthernet\" : {\n                \"ipAddresses\" : [ {\n                  \"fixedAddresses\" : [ null, null ],\n                  \"addressRange\" : { },\n                  \"type\" : \"IPV4\",\n                  \"numDynamicAddresses\" : 6\n                }, {\n                  \"fixedAddresses\" : [ null, null ],\n                  \"addressRange\" : { },\n                  \"type\" : \"IPV4\",\n                  \"numDynamicAddresses\" : 6\n                } ],\n                \"segmentationId\" : \"segmentationId\"\n              },\n              \"layerProtocol\" : \"IP_OVER_ETHERNET\"\n            }, {\n              \"ipOverEthernet\" : {\n                \"ipAddresses\" : [ {\n                  \"fixedAddresses\" : [ null, null ],\n                  \"addressRange\" : { },\n                  \"type\" : \"IPV4\",\n                  \"numDynamicAddresses\" : 6\n                }, {\n                  \"fixedAddresses\" : [ null, null ],\n                  \"addressRange\" : { },\n                  \"type\" : \"IPV4\",\n                  \"numDynamicAddresses\" : 6\n                } ],\n                \"segmentationId\" : \"segmentationId\"\n              },\n              \"layerProtocol\" : \"IP_OVER_ETHERNET\"\n            } ]\n          }\n        }\n      }, {\n        \"cpConfig\" : {\n          \"key\" : {\n            \"cpProtocolData\" : [ {\n              \"ipOverEthernet\" : {\n                \"ipAddresses\" : [ {\n                  \"fixedAddresses\" : [ null, null ],\n                  \"addressRange\" : { },\n                  \"type\" : \"IPV4\",\n                  \"numDynamicAddresses\" : 6\n                }, {\n                  \"fixedAddresses\" : [ null, null ],\n                  \"addressRange\" : { },\n                  \"type\" : \"IPV4\",\n                  \"numDynamicAddresses\" : 6\n                } ],\n                \"segmentationId\" : \"segmentationId\"\n              },\n              \"layerProtocol\" : \"IP_OVER_ETHERNET\"\n            }, {\n              \"ipOverEthernet\" : {\n                \"ipAddresses\" : [ {\n                  \"fixedAddresses\" : [ null, null ],\n                  \"addressRange\" : { },\n                  \"type\" : \"IPV4\",\n                  \"numDynamicAddresses\" : 6\n                }, {\n                  \"fixedAddresses\" : [ null, null ],\n                  \"addressRange\" : { },\n                  \"type\" : \"IPV4\",\n                  \"numDynamicAddresses\" : 6\n                } ],\n                \"segmentationId\" : \"segmentationId\"\n              },\n              \"layerProtocol\" : \"IP_OVER_ETHERNET\"\n            } ]\n          }\n        }\n      } ]\n    }, {\n      \"resourceHandle\" : {\n        \"vimLevelResourceType\" : \"vimLevelResourceType\"\n      },\n      \"extLinkPorts\" : [ { }, { } ],\n      \"currentVnfExtCpData\" : [ {\n        \"cpConfig\" : {\n          \"key\" : {\n            \"cpProtocolData\" : [ {\n              \"ipOverEthernet\" : {\n                \"ipAddresses\" : [ {\n                  \"fixedAddresses\" : [ null, null ],\n                  \"addressRange\" : { },\n                  \"type\" : \"IPV4\",\n                  \"numDynamicAddresses\" : 6\n                }, {\n                  \"fixedAddresses\" : [ null, null ],\n                  \"addressRange\" : { },\n                  \"type\" : \"IPV4\",\n                  \"numDynamicAddresses\" : 6\n                } ],\n                \"segmentationId\" : \"segmentationId\"\n              },\n              \"layerProtocol\" : \"IP_OVER_ETHERNET\"\n            }, {\n              \"ipOverEthernet\" : {\n                \"ipAddresses\" : [ {\n                  \"fixedAddresses\" : [ null, null ],\n                  \"addressRange\" : { },\n                  \"type\" : \"IPV4\",\n                  \"numDynamicAddresses\" : 6\n                }, {\n                  \"fixedAddresses\" : [ null, null ],\n                  \"addressRange\" : { },\n                  \"type\" : \"IPV4\",\n                  \"numDynamicAddresses\" : 6\n                } ],\n                \"segmentationId\" : \"segmentationId\"\n              },\n              \"layerProtocol\" : \"IP_OVER_ETHERNET\"\n            } ]\n          }\n        }\n      }, {\n        \"cpConfig\" : {\n          \"key\" : {\n            \"cpProtocolData\" : [ {\n              \"ipOverEthernet\" : {\n                \"ipAddresses\" : [ {\n                  \"fixedAddresses\" : [ null, null ],\n                  \"addressRange\" : { },\n                  \"type\" : \"IPV4\",\n                  \"numDynamicAddresses\" : 6\n                }, {\n                  \"fixedAddresses\" : [ null, null ],\n                  \"addressRange\" : { },\n                  \"type\" : \"IPV4\",\n                  \"numDynamicAddresses\" : 6\n                } ],\n                \"segmentationId\" : \"segmentationId\"\n              },\n              \"layerProtocol\" : \"IP_OVER_ETHERNET\"\n            }, {\n              \"ipOverEthernet\" : {\n                \"ipAddresses\" : [ {\n                  \"fixedAddresses\" : [ null, null ],\n                  \"addressRange\" : { },\n                  \"type\" : \"IPV4\",\n                  \"numDynamicAddresses\" : 6\n                }, {\n                  \"fixedAddresses\" : [ null, null ],\n                  \"addressRange\" : { },\n                  \"type\" : \"IPV4\",\n                  \"numDynamicAddresses\" : 6\n                } ],\n                \"segmentationId\" : \"segmentationId\"\n              },\n              \"layerProtocol\" : \"IP_OVER_ETHERNET\"\n            } ]\n          }\n        }\n      } ]\n    } ],\n    \"localizationLanguage\" : \"localizationLanguage\",\n    \"vnfVirtualLinkResourceInfo\" : [ {\n      \"vnfLinkPorts\" : [ null, null ]\n    }, {\n      \"vnfLinkPorts\" : [ null, null ]\n    } ],\n    \"vnfcResourceInfo\" : [ {\n      \"storageResourceIds\" : [ null, null ],\n      \"vnfcCpInfo\" : [ {\n        \"cpProtocolInfo\" : [ null, null ]\n      }, {\n        \"cpProtocolInfo\" : [ null, null ]\n      } ]\n    }, {\n      \"storageResourceIds\" : [ null, null ],\n      \"vnfcCpInfo\" : [ {\n        \"cpProtocolInfo\" : [ null, null ]\n      }, {\n        \"cpProtocolInfo\" : [ null, null ]\n      } ]\n    } ],\n    \"extCpInfo\" : [ {\n      \"cpProtocolInfo\" : [ {\n        \"ipOverEthernet\" : {\n          \"macAddress\" : \"macAddress\",\n          \"ipAddresses\" : [ {\n            \"subnetId\" : \"subnetId\",\n            \"addresses\" : [ \"addresses\", \"addresses\" ],\n            \"isDynamic\" : true,\n            \"addressRange\" : { },\n            \"type\" : \"IPV4\"\n          }, {\n            \"subnetId\" : \"subnetId\",\n            \"addresses\" : [ \"addresses\", \"addresses\" ],\n            \"isDynamic\" : true,\n            \"addressRange\" : { },\n            \"type\" : \"IPV4\"\n          } ],\n          \"segmentationId\" : \"segmentationId\"\n        },\n        \"layerProtocol\" : \"IP_OVER_ETHERNET\"\n      }, {\n        \"ipOverEthernet\" : {\n          \"macAddress\" : \"macAddress\",\n          \"ipAddresses\" : [ {\n            \"subnetId\" : \"subnetId\",\n            \"addresses\" : [ \"addresses\", \"addresses\" ],\n            \"isDynamic\" : true,\n            \"addressRange\" : { },\n            \"type\" : \"IPV4\"\n          }, {\n            \"subnetId\" : \"subnetId\",\n            \"addresses\" : [ \"addresses\", \"addresses\" ],\n            \"isDynamic\" : true,\n            \"addressRange\" : { },\n            \"type\" : \"IPV4\"\n          } ],\n          \"segmentationId\" : \"segmentationId\"\n        },\n        \"layerProtocol\" : \"IP_OVER_ETHERNET\"\n      } ],\n      \"id\" : \"id\"\n    }, {\n      \"cpProtocolInfo\" : [ {\n        \"ipOverEthernet\" : {\n          \"macAddress\" : \"macAddress\",\n          \"ipAddresses\" : [ {\n            \"subnetId\" : \"subnetId\",\n            \"addresses\" : [ \"addresses\", \"addresses\" ],\n            \"isDynamic\" : true,\n            \"addressRange\" : { },\n            \"type\" : \"IPV4\"\n          }, {\n            \"subnetId\" : \"subnetId\",\n            \"addresses\" : [ \"addresses\", \"addresses\" ],\n            \"isDynamic\" : true,\n            \"addressRange\" : { },\n            \"type\" : \"IPV4\"\n          } ],\n          \"segmentationId\" : \"segmentationId\"\n        },\n        \"layerProtocol\" : \"IP_OVER_ETHERNET\"\n      }, {\n        \"ipOverEthernet\" : {\n          \"macAddress\" : \"macAddress\",\n          \"ipAddresses\" : [ {\n            \"subnetId\" : \"subnetId\",\n            \"addresses\" : [ \"addresses\", \"addresses\" ],\n            \"isDynamic\" : true,\n            \"addressRange\" : { },\n            \"type\" : \"IPV4\"\n          }, {\n            \"subnetId\" : \"subnetId\",\n            \"addresses\" : [ \"addresses\", \"addresses\" ],\n            \"isDynamic\" : true,\n            \"addressRange\" : { },\n            \"type\" : \"IPV4\"\n          } ],\n          \"segmentationId\" : \"segmentationId\"\n        },\n        \"layerProtocol\" : \"IP_OVER_ETHERNET\"\n      } ],\n      \"id\" : \"id\"\n    } ],\n    \"vnfcInfo\" : [ { }, { } ]\n  },\n  \"vnfInstanceName\" : \"vnfInstanceName\",\n  \"id\" : \"id\",\n  \"vnfSoftwareVersion\" : \"vnfSoftwareVersion\"\n} ]",
							List.class), HttpStatus.NOT_IMPLEMENTED);
				} catch (final IOException e) {
					log.error("Couldn't serialize response for content type application/json", e);
					return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
				}
			}
		} else {
			log.warn("ObjectMapper or HttpServletRequest not configured in default VnfInstancesApi interface so no example is generated");
		}
		return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
	}

	@Operation(summary = "", description = "The POST method creates a new VNF instance resource based on a VNF package that is onboarded and in \"ENABLED\" state. ", tags = {})
	@ApiResponses(value = {
			@ApiResponse(responseCode = "201", description = "201 CREATED Shall be returned when a new \"Individual VNF Instance\" resource and  the associated VNF instance identifier has been created successfully. The response body shall contain a representation of the created VNF  instance, as defined in clause 5.5.2.2. The HTTP response shall include a \"Location\" HTTP header that contains  the resource URI of the created VNF instance. ", content = @Content(schema = @Schema(implementation = VnfInstance.class))),

			@ApiResponse(responseCode = "400", description = "400 BAD REQUEST 400 code can be returned in the following specified cases, the specific cause has to be proper specified in the \"ProblemDetails\" structure to be returned. If the request is malformed or syntactically incorrect (e.g. if the request URI contains incorrect query parameters or the payload body contains a syntactically incorrect data structure), the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and should include in the \"detail\" attribute more information about the source of the problem. If the response to a GET request which queries a container resource would be so big that the performance of the API producer is adversely affected, and the API producer does not support paging for the affected resource, it shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and should include in the \"detail\" attribute more information about the source of the problem. If there is an application error related to the client's input that cannot be easily mapped to any other HTTP response code (\"catch all error\"), the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and shall include in the \"detail\" attribute more information about the source of the problem. If the request contains a malformed access token, the API producer should respond with this response. The details of the error shall be returned in the WWW Authenticate HTTP header, as defined in IETF RFC 6750 and IETF RFC 7235. The ProblemDetails structure may be provided. The use of this HTTP error response code described above is applicable to the use of the OAuth 2.0 for the authorization of API requests and notifications, as defined in clauses 4.5.3.3 and 4.5.3.4. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "401", description = "401 UNAUTHORIZED If the request contains no access token even though one is required, or if the request contains an authorization token that is invalid (e.g. expired or revoked), the API producer should respond with this response. The details of the error shall be returned in the WWW-Authenticate HTTP header, as defined in IETF RFC 6750 and IETF RFC 7235. The ProblemDetails structure may be provided. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "403", description = "403 FORBIDDEN If the API consumer is not allowed to perform a particular request to a particular resource, the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided. It should include in the \"detail\" attribute information about the source of the problem, and may indicate how to solve it. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "404", description = "404 NOT FOUND If the API producer did not find a current representation for the resource addressed by the URI passed in the request or is not willing to disclose that one exists, it shall respond with this response code. The \"ProblemDetails\" structure may be provided, including in the \"detail\" attribute information about the source of the problem, e.g. a wrong resource URI variable. This response code is not appropriate in case the resource addressed by the URI is a container resource which is designed to contain child resources, but does not contain any child resource at the time the request is received. For a GET request to an existing empty container resource, a typical response contains a 200 OK response code and a payload body with an empty array. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "405", description = "405 METHOD NOT ALLOWED If a particular HTTP method is not supported for a particular resource, the API producer shall respond with this response code. The \"ProblemDetails\" structure may be omitted. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "406", description = "406 NOT ACCEPTABLE If the \"Accept\" HTTP header does not contain at least one name of a content type that is acceptable to the API producer, the API producer shall respond with this response code. The \"ProblemDetails\" structure may be omitted. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "416", description = "416 Range Not Satisfiable ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "422", description = "422 UNPROCESSABLE ENTITY If the payload body of a request contains syntactically correct data (e.g. well-formed JSON) but the data cannot be processed (e.g. because it fails validation against a schema), the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and should include in the \"detail\" attribute more information about the source of the problem. This error response code is only applicable for methods that have a request body. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "429", description = "429 TOO MANY REQUESTS If the API consumer has sent too many requests in a defined period of time and the API producer is able to detect that condition (\"rate limiting\"), the API producer shall respond with this response code, following the provisions in IETF RFC 6585 [17] for the use of the \"Retry-After\" HTTP header. The \"ProblemDetails\" structure shall be provided and shall include in the \"detail\" attribute more information about the source of the problem. The period of time and allowed number of requests are configured within the API producer by means outside the scope of the present document. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "500", description = "500 INTERNAL SERVER ERROR If there is an application error not related to the client's input that cannot be easily mapped to any other HTTP response code (\"catch all error\"), the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and shall include in the \"detail\" attribute more information about the source of the problem. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "503", description = "503 SERVICE UNAVAILABLE If the API producer encounters an internal overload situation of itself or of a system it relies on, it should respond with this response code, following the provisions in IETF RFC 7231 for the use of the \"Retry-After\" HTTP header and for the alternative to refuse the connection. The \"ProblemDetails\" structure may be omitted. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "504", description = "504 GATEWAY TIMEOUT If the API producer encounters a timeout while waiting for a response from an upstream server (i.e. a server that the API producer communicates with when fulfilling a request), it should respond with this response code. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))) })
	@RequestMapping(value = "/vnf_instances", produces = { "application/json" }, consumes = { "application/json" }, method = RequestMethod.POST)
	default ResponseEntity<VnfInstance> vnfInstancesPost(@Parameter(in = ParameterIn.HEADER, description = "Version of the API requested to use when responding to this request. ", required = true, schema = @Schema()) @RequestHeader(value = "Version", required = true) final String version, @Parameter(in = ParameterIn.HEADER, description = "Content-Types that are acceptable for the response. Reference: IETF RFC 7231. ", required = true, schema = @Schema()) @RequestHeader(value = "Accept", required = true) final String accept, @Parameter(in = ParameterIn.HEADER, description = "The MIME type of the body of the request. Reference: IETF RFC 7231 ", required = true, schema = @Schema()) @RequestHeader(value = "Content-Type", required = true) final String contentType, @Parameter(in = ParameterIn.DEFAULT, description = "The VNF creation parameters, as defined in clause 5.5.2.3.", required = true, schema = @Schema()) @Valid @RequestBody final CreateVnfRequest body, @Parameter(in = ParameterIn.HEADER, description = "The authorization token for the request. Reference: IETF RFC 7235. ", schema = @Schema()) @RequestHeader(value = "Authorization", required = false) final String authorization) {
		if (getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
			if (getAcceptHeader().get().contains("application/json")) {
				try {
					return new ResponseEntity<>(getObjectMapper().get().readValue(
							"{\n  \"vnfProductName\" : \"vnfProductName\",\n  \"vnfProvider\" : \"vnfProvider\",\n  \"_links\" : {\n    \"self\" : {\n      \"href\" : \"href\"\n    }\n  },\n  \"vnfConfigurableProperties\" : { },\n  \"instantiationState\" : \"NOT_INSTANTIATED\",\n  \"vnfInstanceDescription\" : \"vnfInstanceDescription\",\n  \"instantiatedVnfInfo\" : {\n    \"flavourId\" : \"flavourId\",\n    \"scaleStatus\" : [ {\n      \"scaleLevel\" : 0\n    }, {\n      \"scaleLevel\" : 0\n    } ],\n    \"extManagedVirtualLinkInfo\" : [ {\n      \"vnfLinkPorts\" : [ {\n        \"cpInstanceType\" : \"VNFC_CP\"\n      }, {\n        \"cpInstanceType\" : \"VNFC_CP\"\n      } ]\n    }, {\n      \"vnfLinkPorts\" : [ {\n        \"cpInstanceType\" : \"VNFC_CP\"\n      }, {\n        \"cpInstanceType\" : \"VNFC_CP\"\n      } ]\n    } ],\n    \"maxScaleLevels\" : [ null, null ],\n    \"vnfState\" : \"STARTED\",\n    \"monitoringParameters\" : [ {\n      \"name\" : \"name\",\n      \"performanceMetric\" : \"performanceMetric\"\n    }, {\n      \"name\" : \"name\",\n      \"performanceMetric\" : \"performanceMetric\"\n    } ],\n    \"vnfVirtualStorageResourceInfo\" : [ { }, { } ],\n    \"extVirtualLinkInfo\" : [ {\n      \"resourceHandle\" : {\n        \"vimLevelResourceType\" : \"vimLevelResourceType\"\n      },\n      \"extLinkPorts\" : [ { }, { } ],\n      \"currentVnfExtCpData\" : [ {\n        \"cpConfig\" : {\n          \"key\" : {\n            \"cpProtocolData\" : [ {\n              \"ipOverEthernet\" : {\n                \"ipAddresses\" : [ {\n                  \"fixedAddresses\" : [ null, null ],\n                  \"addressRange\" : { },\n                  \"type\" : \"IPV4\",\n                  \"numDynamicAddresses\" : 6\n                }, {\n                  \"fixedAddresses\" : [ null, null ],\n                  \"addressRange\" : { },\n                  \"type\" : \"IPV4\",\n                  \"numDynamicAddresses\" : 6\n                } ],\n                \"segmentationId\" : \"segmentationId\"\n              },\n              \"layerProtocol\" : \"IP_OVER_ETHERNET\"\n            }, {\n              \"ipOverEthernet\" : {\n                \"ipAddresses\" : [ {\n                  \"fixedAddresses\" : [ null, null ],\n                  \"addressRange\" : { },\n                  \"type\" : \"IPV4\",\n                  \"numDynamicAddresses\" : 6\n                }, {\n                  \"fixedAddresses\" : [ null, null ],\n                  \"addressRange\" : { },\n                  \"type\" : \"IPV4\",\n                  \"numDynamicAddresses\" : 6\n                } ],\n                \"segmentationId\" : \"segmentationId\"\n              },\n              \"layerProtocol\" : \"IP_OVER_ETHERNET\"\n            } ]\n          }\n        }\n      }, {\n        \"cpConfig\" : {\n          \"key\" : {\n            \"cpProtocolData\" : [ {\n              \"ipOverEthernet\" : {\n                \"ipAddresses\" : [ {\n                  \"fixedAddresses\" : [ null, null ],\n                  \"addressRange\" : { },\n                  \"type\" : \"IPV4\",\n                  \"numDynamicAddresses\" : 6\n                }, {\n                  \"fixedAddresses\" : [ null, null ],\n                  \"addressRange\" : { },\n                  \"type\" : \"IPV4\",\n                  \"numDynamicAddresses\" : 6\n                } ],\n                \"segmentationId\" : \"segmentationId\"\n              },\n              \"layerProtocol\" : \"IP_OVER_ETHERNET\"\n            }, {\n              \"ipOverEthernet\" : {\n                \"ipAddresses\" : [ {\n                  \"fixedAddresses\" : [ null, null ],\n                  \"addressRange\" : { },\n                  \"type\" : \"IPV4\",\n                  \"numDynamicAddresses\" : 6\n                }, {\n                  \"fixedAddresses\" : [ null, null ],\n                  \"addressRange\" : { },\n                  \"type\" : \"IPV4\",\n                  \"numDynamicAddresses\" : 6\n                } ],\n                \"segmentationId\" : \"segmentationId\"\n              },\n              \"layerProtocol\" : \"IP_OVER_ETHERNET\"\n            } ]\n          }\n        }\n      } ]\n    }, {\n      \"resourceHandle\" : {\n        \"vimLevelResourceType\" : \"vimLevelResourceType\"\n      },\n      \"extLinkPorts\" : [ { }, { } ],\n      \"currentVnfExtCpData\" : [ {\n        \"cpConfig\" : {\n          \"key\" : {\n            \"cpProtocolData\" : [ {\n              \"ipOverEthernet\" : {\n                \"ipAddresses\" : [ {\n                  \"fixedAddresses\" : [ null, null ],\n                  \"addressRange\" : { },\n                  \"type\" : \"IPV4\",\n                  \"numDynamicAddresses\" : 6\n                }, {\n                  \"fixedAddresses\" : [ null, null ],\n                  \"addressRange\" : { },\n                  \"type\" : \"IPV4\",\n                  \"numDynamicAddresses\" : 6\n                } ],\n                \"segmentationId\" : \"segmentationId\"\n              },\n              \"layerProtocol\" : \"IP_OVER_ETHERNET\"\n            }, {\n              \"ipOverEthernet\" : {\n                \"ipAddresses\" : [ {\n                  \"fixedAddresses\" : [ null, null ],\n                  \"addressRange\" : { },\n                  \"type\" : \"IPV4\",\n                  \"numDynamicAddresses\" : 6\n                }, {\n                  \"fixedAddresses\" : [ null, null ],\n                  \"addressRange\" : { },\n                  \"type\" : \"IPV4\",\n                  \"numDynamicAddresses\" : 6\n                } ],\n                \"segmentationId\" : \"segmentationId\"\n              },\n              \"layerProtocol\" : \"IP_OVER_ETHERNET\"\n            } ]\n          }\n        }\n      }, {\n        \"cpConfig\" : {\n          \"key\" : {\n            \"cpProtocolData\" : [ {\n              \"ipOverEthernet\" : {\n                \"ipAddresses\" : [ {\n                  \"fixedAddresses\" : [ null, null ],\n                  \"addressRange\" : { },\n                  \"type\" : \"IPV4\",\n                  \"numDynamicAddresses\" : 6\n                }, {\n                  \"fixedAddresses\" : [ null, null ],\n                  \"addressRange\" : { },\n                  \"type\" : \"IPV4\",\n                  \"numDynamicAddresses\" : 6\n                } ],\n                \"segmentationId\" : \"segmentationId\"\n              },\n              \"layerProtocol\" : \"IP_OVER_ETHERNET\"\n            }, {\n              \"ipOverEthernet\" : {\n                \"ipAddresses\" : [ {\n                  \"fixedAddresses\" : [ null, null ],\n                  \"addressRange\" : { },\n                  \"type\" : \"IPV4\",\n                  \"numDynamicAddresses\" : 6\n                }, {\n                  \"fixedAddresses\" : [ null, null ],\n                  \"addressRange\" : { },\n                  \"type\" : \"IPV4\",\n                  \"numDynamicAddresses\" : 6\n                } ],\n                \"segmentationId\" : \"segmentationId\"\n              },\n              \"layerProtocol\" : \"IP_OVER_ETHERNET\"\n            } ]\n          }\n        }\n      } ]\n    } ],\n    \"localizationLanguage\" : \"localizationLanguage\",\n    \"vnfVirtualLinkResourceInfo\" : [ {\n      \"vnfLinkPorts\" : [ null, null ]\n    }, {\n      \"vnfLinkPorts\" : [ null, null ]\n    } ],\n    \"vnfcResourceInfo\" : [ {\n      \"storageResourceIds\" : [ null, null ],\n      \"vnfcCpInfo\" : [ {\n        \"cpProtocolInfo\" : [ null, null ]\n      }, {\n        \"cpProtocolInfo\" : [ null, null ]\n      } ]\n    }, {\n      \"storageResourceIds\" : [ null, null ],\n      \"vnfcCpInfo\" : [ {\n        \"cpProtocolInfo\" : [ null, null ]\n      }, {\n        \"cpProtocolInfo\" : [ null, null ]\n      } ]\n    } ],\n    \"extCpInfo\" : [ {\n      \"cpProtocolInfo\" : [ {\n        \"ipOverEthernet\" : {\n          \"macAddress\" : \"macAddress\",\n          \"ipAddresses\" : [ {\n            \"subnetId\" : \"subnetId\",\n            \"addresses\" : [ \"addresses\", \"addresses\" ],\n            \"isDynamic\" : true,\n            \"addressRange\" : { },\n            \"type\" : \"IPV4\"\n          }, {\n            \"subnetId\" : \"subnetId\",\n            \"addresses\" : [ \"addresses\", \"addresses\" ],\n            \"isDynamic\" : true,\n            \"addressRange\" : { },\n            \"type\" : \"IPV4\"\n          } ],\n          \"segmentationId\" : \"segmentationId\"\n        },\n        \"layerProtocol\" : \"IP_OVER_ETHERNET\"\n      }, {\n        \"ipOverEthernet\" : {\n          \"macAddress\" : \"macAddress\",\n          \"ipAddresses\" : [ {\n            \"subnetId\" : \"subnetId\",\n            \"addresses\" : [ \"addresses\", \"addresses\" ],\n            \"isDynamic\" : true,\n            \"addressRange\" : { },\n            \"type\" : \"IPV4\"\n          }, {\n            \"subnetId\" : \"subnetId\",\n            \"addresses\" : [ \"addresses\", \"addresses\" ],\n            \"isDynamic\" : true,\n            \"addressRange\" : { },\n            \"type\" : \"IPV4\"\n          } ],\n          \"segmentationId\" : \"segmentationId\"\n        },\n        \"layerProtocol\" : \"IP_OVER_ETHERNET\"\n      } ],\n      \"id\" : \"id\"\n    }, {\n      \"cpProtocolInfo\" : [ {\n        \"ipOverEthernet\" : {\n          \"macAddress\" : \"macAddress\",\n          \"ipAddresses\" : [ {\n            \"subnetId\" : \"subnetId\",\n            \"addresses\" : [ \"addresses\", \"addresses\" ],\n            \"isDynamic\" : true,\n            \"addressRange\" : { },\n            \"type\" : \"IPV4\"\n          }, {\n            \"subnetId\" : \"subnetId\",\n            \"addresses\" : [ \"addresses\", \"addresses\" ],\n            \"isDynamic\" : true,\n            \"addressRange\" : { },\n            \"type\" : \"IPV4\"\n          } ],\n          \"segmentationId\" : \"segmentationId\"\n        },\n        \"layerProtocol\" : \"IP_OVER_ETHERNET\"\n      }, {\n        \"ipOverEthernet\" : {\n          \"macAddress\" : \"macAddress\",\n          \"ipAddresses\" : [ {\n            \"subnetId\" : \"subnetId\",\n            \"addresses\" : [ \"addresses\", \"addresses\" ],\n            \"isDynamic\" : true,\n            \"addressRange\" : { },\n            \"type\" : \"IPV4\"\n          }, {\n            \"subnetId\" : \"subnetId\",\n            \"addresses\" : [ \"addresses\", \"addresses\" ],\n            \"isDynamic\" : true,\n            \"addressRange\" : { },\n            \"type\" : \"IPV4\"\n          } ],\n          \"segmentationId\" : \"segmentationId\"\n        },\n        \"layerProtocol\" : \"IP_OVER_ETHERNET\"\n      } ],\n      \"id\" : \"id\"\n    } ],\n    \"vnfcInfo\" : [ { }, { } ]\n  },\n  \"vnfInstanceName\" : \"vnfInstanceName\",\n  \"id\" : \"id\",\n  \"vnfSoftwareVersion\" : \"vnfSoftwareVersion\"\n}",
							VnfInstance.class), HttpStatus.NOT_IMPLEMENTED);
				} catch (final IOException e) {
					log.error("Couldn't serialize response for content type application/json", e);
					return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
				}
			}
		} else {
			log.warn("ObjectMapper or HttpServletRequest not configured in default VnfInstancesApi interface so no example is generated");
		}
		return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
	}

	@Operation(summary = "", description = "The POST method changes the external connectivity of a VNF instance. ", tags = {})
	@ApiResponses(value = {
			@ApiResponse(responseCode = "202", description = "202 ACCEPTED The request has been accepted for processing, but the processing has not been completed. The response body shall be empty. The HTTP response shall include a \"Location\" HTTP header that contains the URI of the newly-created \"VNF LCM operation occurrence\" resource corresponding to the operation. "),

			@ApiResponse(responseCode = "400", description = "400 BAD REQUEST 400 code can be returned in the following specified cases, the specific cause has to be proper specified in the \"ProblemDetails\" structure to be returned. If the request is malformed or syntactically incorrect (e.g. if the request URI contains incorrect query parameters or the payload body contains a syntactically incorrect data structure), the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and should include in the \"detail\" attribute more information about the source of the problem. If the response to a GET request which queries a container resource would be so big that the performance of the API producer is adversely affected, and the API producer does not support paging for the affected resource, it shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and should include in the \"detail\" attribute more information about the source of the problem. If there is an application error related to the client's input that cannot be easily mapped to any other HTTP response code (\"catch all error\"), the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and shall include in the \"detail\" attribute more information about the source of the problem. If the request contains a malformed access token, the API producer should respond with this response. The details of the error shall be returned in the WWW Authenticate HTTP header, as defined in IETF RFC 6750 and IETF RFC 7235. The ProblemDetails structure may be provided. The use of this HTTP error response code described above is applicable to the use of the OAuth 2.0 for the authorization of API requests and notifications, as defined in clauses 4.5.3.3 and 4.5.3.4. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "401", description = "401 UNAUTHORIZED If the request contains no access token even though one is required, or if the request contains an authorization token that is invalid (e.g. expired or revoked), the API producer should respond with this response. The details of the error shall be returned in the WWW-Authenticate HTTP header, as defined in IETF RFC 6750 and IETF RFC 7235. The ProblemDetails structure may be provided. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "403", description = "403 FORBIDDEN If the API consumer is not allowed to perform a particular request to a particular resource, the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided. It should include in the \"detail\" attribute information about the source of the problem, and may indicate how to solve it. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "404", description = "404 NOT FOUND If the API producer did not find a current representation for the resource addressed by the URI passed in the request or is not willing to disclose that one exists, it shall respond with this response code. The \"ProblemDetails\" structure may be provided, including in the \"detail\" attribute information about the source of the problem, e.g. a wrong resource URI variable. This response code is not appropriate in case the resource addressed by the URI is a container resource which is designed to contain child resources, but does not contain any child resource at the time the request is received. For a GET request to an existing empty container resource, a typical response contains a 200 OK response code and a payload body with an empty array. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "405", description = "405 METHOD NOT ALLOWED If a particular HTTP method is not supported for a particular resource, the API producer shall respond with this response code. The \"ProblemDetails\" structure may be omitted. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "406", description = "406 NOT ACCEPTABLE If the \"Accept\" HTTP header does not contain at least one name of a content type that is acceptable to the API producer, the API producer shall respond with this response code. The \"ProblemDetails\" structure may be omitted. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "409", description = "409 CONFLICT ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "416", description = "416 Range Not Satisfiable ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "422", description = "422 UNPROCESSABLE ENTITY If the payload body of a request contains syntactically correct data (e.g. well-formed JSON) but the data cannot be processed (e.g. because it fails validation against a schema), the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and should include in the \"detail\" attribute more information about the source of the problem. This error response code is only applicable for methods that have a request body. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "429", description = "429 TOO MANY REQUESTS If the API consumer has sent too many requests in a defined period of time and the API producer is able to detect that condition (\"rate limiting\"), the API producer shall respond with this response code, following the provisions in IETF RFC 6585 [17] for the use of the \"Retry-After\" HTTP header. The \"ProblemDetails\" structure shall be provided and shall include in the \"detail\" attribute more information about the source of the problem. The period of time and allowed number of requests are configured within the API producer by means outside the scope of the present document. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "500", description = "500 INTERNAL SERVER ERROR If there is an application error not related to the client's input that cannot be easily mapped to any other HTTP response code (\"catch all error\"), the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and shall include in the \"detail\" attribute more information about the source of the problem. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "503", description = "503 SERVICE UNAVAILABLE If the API producer encounters an internal overload situation of itself or of a system it relies on, it should respond with this response code, following the provisions in IETF RFC 7231 for the use of the \"Retry-After\" HTTP header and for the alternative to refuse the connection. The \"ProblemDetails\" structure may be omitted. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "504", description = "504 GATEWAY TIMEOUT If the API producer encounters a timeout while waiting for a response from an upstream server (i.e. a server that the API producer communicates with when fulfilling a request), it should respond with this response code. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))) })
	@RequestMapping(value = "/vnf_instances/{vnfInstanceId}/change_ext_conn", produces = { "application/json" }, consumes = { "application/json" }, method = RequestMethod.POST)
	default ResponseEntity<Void> vnfInstancesVnfInstanceIdChangeExtConnPost(@Parameter(in = ParameterIn.HEADER, description = "Version of the API requested to use when responding to this request. ", required = true, schema = @Schema()) @RequestHeader(value = "Version", required = true) final String version, @Parameter(in = ParameterIn.PATH, description = "Identifier of the VNF instance. This identifier can be retrieved from the resource referenced by the \"Location\" HTTP header in the response to a POST request creating a new VNF instance resource. It can also be retrieved from the \"id\" attribute in the payload body of that response. ", required = true, schema = @Schema()) @PathVariable("vnfInstanceId") final String vnfInstanceId, @Parameter(in = ParameterIn.DEFAULT, description = "Parameters for the Change external VNF connectivity operation.", required = true, schema = @Schema()) @Valid @RequestBody final ChangeExtVnfConnectivityRequest body, @Parameter(in = ParameterIn.HEADER, description = "The authorization token for the request. Reference: IETF RFC 7235. ", schema = @Schema()) @RequestHeader(value = "Authorization", required = false) final String authorization) {
		if (getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
		} else {
			log.warn("ObjectMapper or HttpServletRequest not configured in default VnfInstancesApi interface so no example is generated");
		}
		return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
	}

	@Operation(summary = "", description = "The POST method changes the deployment flavour of a VNF instance. ", tags = {})
	@ApiResponses(value = {
			@ApiResponse(responseCode = "202", description = "202 ACCEPTED The request has been accepted for processing, but the processing has not been completed. The response body shall be empty. The HTTP response shall include a \"Location\" HTTP header that contains the URI of the newly-created \"Individual VNF LCM operation occurrence\" resource corresponding to the operation. "),

			@ApiResponse(responseCode = "400", description = "400 BAD REQUEST 400 code can be returned in the following specified cases, the specific cause has to be proper specified in the \"ProblemDetails\" structure to be returned. If the request is malformed or syntactically incorrect (e.g. if the request URI contains incorrect query parameters or the payload body contains a syntactically incorrect data structure), the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and should include in the \"detail\" attribute more information about the source of the problem. If the response to a GET request which queries a container resource would be so big that the performance of the API producer is adversely affected, and the API producer does not support paging for the affected resource, it shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and should include in the \"detail\" attribute more information about the source of the problem. If there is an application error related to the client's input that cannot be easily mapped to any other HTTP response code (\"catch all error\"), the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and shall include in the \"detail\" attribute more information about the source of the problem. If the request contains a malformed access token, the API producer should respond with this response. The details of the error shall be returned in the WWW Authenticate HTTP header, as defined in IETF RFC 6750 and IETF RFC 7235. The ProblemDetails structure may be provided. The use of this HTTP error response code described above is applicable to the use of the OAuth 2.0 for the authorization of API requests and notifications, as defined in clauses 4.5.3.3 and 4.5.3.4. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "401", description = "401 UNAUTHORIZED If the request contains no access token even though one is required, or if the request contains an authorization token that is invalid (e.g. expired or revoked), the API producer should respond with this response. The details of the error shall be returned in the WWW-Authenticate HTTP header, as defined in IETF RFC 6750 and IETF RFC 7235. The ProblemDetails structure may be provided. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "403", description = "403 FORBIDDEN If the API consumer is not allowed to perform a particular request to a particular resource, the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided. It should include in the \"detail\" attribute information about the source of the problem, and may indicate how to solve it. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "404", description = "404 NOT FOUND If the API producer did not find a current representation for the resource addressed by the URI passed in the request or is not willing to disclose that one exists, it shall respond with this response code. The \"ProblemDetails\" structure may be provided, including in the \"detail\" attribute information about the source of the problem, e.g. a wrong resource URI variable. This response code is not appropriate in case the resource addressed by the URI is a container resource which is designed to contain child resources, but does not contain any child resource at the time the request is received. For a GET request to an existing empty container resource, a typical response contains a 200 OK response code and a payload body with an empty array. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "405", description = "405 METHOD NOT ALLOWED If a particular HTTP method is not supported for a particular resource, the API producer shall respond with this response code. The \"ProblemDetails\" structure may be omitted. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "406", description = "406 NOT ACCEPTABLE If the \"Accept\" HTTP header does not contain at least one name of a content type that is acceptable to the API producer, the API producer shall respond with this response code. The \"ProblemDetails\" structure may be omitted. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "409", description = "409 CONFLICT ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "416", description = "416 Range Not Satisfiable ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "422", description = "422 UNPROCESSABLE ENTITY If the payload body of a request contains syntactically correct data (e.g. well-formed JSON) but the data cannot be processed (e.g. because it fails validation against a schema), the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and should include in the \"detail\" attribute more information about the source of the problem. This error response code is only applicable for methods that have a request body. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "429", description = "429 TOO MANY REQUESTS If the API consumer has sent too many requests in a defined period of time and the API producer is able to detect that condition (\"rate limiting\"), the API producer shall respond with this response code, following the provisions in IETF RFC 6585 [17] for the use of the \"Retry-After\" HTTP header. The \"ProblemDetails\" structure shall be provided and shall include in the \"detail\" attribute more information about the source of the problem. The period of time and allowed number of requests are configured within the API producer by means outside the scope of the present document. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "500", description = "500 INTERNAL SERVER ERROR If there is an application error not related to the client's input that cannot be easily mapped to any other HTTP response code (\"catch all error\"), the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and shall include in the \"detail\" attribute more information about the source of the problem. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "503", description = "503 SERVICE UNAVAILABLE If the API producer encounters an internal overload situation of itself or of a system it relies on, it should respond with this response code, following the provisions in IETF RFC 7231 for the use of the \"Retry-After\" HTTP header and for the alternative to refuse the connection. The \"ProblemDetails\" structure may be omitted. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "504", description = "504 GATEWAY TIMEOUT If the API producer encounters a timeout while waiting for a response from an upstream server (i.e. a server that the API producer communicates with when fulfilling a request), it should respond with this response code. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))) })
	@RequestMapping(value = "/vnf_instances/{vnfInstanceId}/change_flavour", produces = { "application/json" }, consumes = { "application/json" }, method = RequestMethod.POST)
	default ResponseEntity<Void> vnfInstancesVnfInstanceIdChangeFlavourPost(@Parameter(in = ParameterIn.HEADER, description = "Version of the API requested to use when responding to this request. ", required = true, schema = @Schema()) @RequestHeader(value = "Version", required = true) final String version, @Parameter(in = ParameterIn.PATH, description = "Identifier of the VNF instance. This identifier can be retrieved from the resource referenced by the \"Location\" HTTP header in the response to a POST request creating a new VNF instance resource. It can also be retrieved from the \"id\" attribute in the payload body of that response. ", required = true, schema = @Schema()) @PathVariable("vnfInstanceId") final String vnfInstanceId, @Parameter(in = ParameterIn.DEFAULT, description = "Parameters for the Change VNF Flavour operation.", required = true, schema = @Schema()) @Valid @RequestBody final ChangeVnfFlavourRequest body, @Parameter(in = ParameterIn.HEADER, description = "The authorization token for the request. Reference: IETF RFC 7235. ", schema = @Schema()) @RequestHeader(value = "Authorization", required = false) final String authorization) {
		if (getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
		} else {
			log.warn("ObjectMapper or HttpServletRequest not configured in default VnfInstancesApi interface so no example is generated");
		}
		return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
	}

	@Operation(summary = "", description = "The POST method changes the current VNF package on which the VNF instance is based. ", tags = {})
	@ApiResponses(value = {
			@ApiResponse(responseCode = "202", description = "202 ACCEPTED Shall be returned when the request has been accepted for processing. The response body shall be empty. The HTTP response shall include a \"Location\" HTTP header that contains the URI of the newly-created \"Individual VNF LCM operation occurrence\" resource corresponding to the instantiation operation. "),

			@ApiResponse(responseCode = "400", description = "400 BAD REQUEST 400 code can be returned in the following specified cases, the specific cause has to be proper specified in the \"ProblemDetails\" structure to be returned. If the request is malformed or syntactically incorrect (e.g. if the request URI contains incorrect query parameters or the payload body contains a syntactically incorrect data structure), the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and should include in the \"detail\" attribute more information about the source of the problem. If the response to a GET request which queries a container resource would be so big that the performance of the API producer is adversely affected, and the API producer does not support paging for the affected resource, it shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and should include in the \"detail\" attribute more information about the source of the problem. If there is an application error related to the client's input that cannot be easily mapped to any other HTTP response code (\"catch all error\"), the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and shall include in the \"detail\" attribute more information about the source of the problem. If the request contains a malformed access token, the API producer should respond with this response. The details of the error shall be returned in the WWW Authenticate HTTP header, as defined in IETF RFC 6750 and IETF RFC 7235. The ProblemDetails structure may be provided. The use of this HTTP error response code described above is applicable to the use of the OAuth 2.0 for the authorization of API requests and notifications, as defined in clauses 4.5.3.3 and 4.5.3.4. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "401", description = "401 UNAUTHORIZED If the request contains no access token even though one is required, or if the request contains an authorization token that is invalid (e.g. expired or revoked), the API producer should respond with this response. The details of the error shall be returned in the WWW-Authenticate HTTP header, as defined in IETF RFC 6750 and IETF RFC 7235. The ProblemDetails structure may be provided. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "403", description = "403 FORBIDDEN If the API consumer is not allowed to perform a particular request to a particular resource, the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided. It should include in the \"detail\" attribute information about the source of the problem, and may indicate how to solve it. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "404", description = "404 NOT FOUND If the API producer did not find a current representation for the resource addressed by the URI passed in the request or is not willing to disclose that one exists, it shall respond with this response code. The \"ProblemDetails\" structure may be provided, including in the \"detail\" attribute information about the source of the problem, e.g. a wrong resource URI variable. This response code is not appropriate in case the resource addressed by the URI is a container resource which is designed to contain child resources, but does not contain any child resource at the time the request is received. For a GET request to an existing empty container resource, a typical response contains a 200 OK response code and a payload body with an empty array. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "405", description = "405 METHOD NOT ALLOWED If a particular HTTP method is not supported for a particular resource, the API producer shall respond with this response code. The \"ProblemDetails\" structure may be omitted. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "406", description = "406 NOT ACCEPTABLE If the \"Accept\" HTTP header does not contain at least one name of a content type that is acceptable to the API producer, the API producer shall respond with this response code. The \"ProblemDetails\" structure may be omitted. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "409", description = "409 CONFLICT ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "416", description = "416 Range Not Satisfiable ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "422", description = "422 UNPROCESSABLE ENTITY If the payload body of a request contains syntactically correct data (e.g. well-formed JSON) but the data cannot be processed (e.g. because it fails validation against a schema), the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and should include in the \"detail\" attribute more information about the source of the problem. This error response code is only applicable for methods that have a request body. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "429", description = "429 TOO MANY REQUESTS If the API consumer has sent too many requests in a defined period of time and the API producer is able to detect that condition (\"rate limiting\"), the API producer shall respond with this response code, following the provisions in IETF RFC 6585 [17] for the use of the \"Retry-After\" HTTP header. The \"ProblemDetails\" structure shall be provided and shall include in the \"detail\" attribute more information about the source of the problem. The period of time and allowed number of requests are configured within the API producer by means outside the scope of the present document. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "500", description = "500 INTERNAL SERVER ERROR If there is an application error not related to the client's input that cannot be easily mapped to any other HTTP response code (\"catch all error\"), the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and shall include in the \"detail\" attribute more information about the source of the problem. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "503", description = "503 SERVICE UNAVAILABLE If the API producer encounters an internal overload situation of itself or of a system it relies on, it should respond with this response code, following the provisions in IETF RFC 7231 for the use of the \"Retry-After\" HTTP header and for the alternative to refuse the connection. The \"ProblemDetails\" structure may be omitted. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "504", description = "504 GATEWAY TIMEOUT If the API producer encounters a timeout while waiting for a response from an upstream server (i.e. a server that the API producer communicates with when fulfilling a request), it should respond with this response code. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))) })
	@RequestMapping(value = "/vnf_instances/{vnfInstanceId}/change_vnfpkg", produces = { "application/json" }, consumes = { "application/json" }, method = RequestMethod.POST)
	default ResponseEntity<Void> vnfInstancesVnfInstanceIdChangeVnfpkgPost(@Parameter(in = ParameterIn.HEADER, description = "Version of the API requested to use when responding to this request. ", required = true, schema = @Schema()) @RequestHeader(value = "Version", required = true) final String version, @Parameter(in = ParameterIn.PATH, description = "Identifier of the VNF instance. This identifier can be retrieved from the resource referenced by the \"Location\" HTTP header in the response to a POST request creating a new VNF instance resource. It can also be retrieved from the \"id\" attribute in the payload body of that response. ", required = true, schema = @Schema()) @PathVariable("vnfInstanceId") final String vnfInstanceId, @Parameter(in = ParameterIn.DEFAULT, description = "Parameters for the Change current VNF package operation.", required = true, schema = @Schema()) @Valid @RequestBody final ChangeCurrentVnfPkgRequest body, @Parameter(in = ParameterIn.HEADER, description = "The authorization token for the request. Reference: IETF RFC 7235. ", schema = @Schema()) @RequestHeader(value = "Authorization", required = false) final String authorization) {
		if (getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
		} else {
			log.warn("ObjectMapper or HttpServletRequest not configured in default VnfInstancesApi interface so no example is generated");
		}
		return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
	}

	@Operation(summary = "", description = "The POST method requests tacking a VNF instance snapshot and populating a previously created VNF snapshot resource (refer to clause 5.4.23.3.1) with the snapshot content. ", tags = {})
	@ApiResponses(value = {
			@ApiResponse(responseCode = "202", description = "202 ACCEPTED Shall be returned when the request was accepted for processing, but the processing has not been completed. The response body shall be empty. The HTTP response shall include a \"Location\" HTTP header that contains the URI of the newly-created \"VNF LCM operation occurrence\" resource corresponding to the operation. "),

			@ApiResponse(responseCode = "400", description = "400 BAD REQUEST 400 code can be returned in the following specified cases, the specific cause has to be proper specified in the \"ProblemDetails\" structure to be returned. If the request is malformed or syntactically incorrect (e.g. if the request URI contains incorrect query parameters or the payload body contains a syntactically incorrect data structure), the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and should include in the \"detail\" attribute more information about the source of the problem. If the response to a GET request which queries a container resource would be so big that the performance of the API producer is adversely affected, and the API producer does not support paging for the affected resource, it shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and should include in the \"detail\" attribute more information about the source of the problem. If there is an application error related to the client's input that cannot be easily mapped to any other HTTP response code (\"catch all error\"), the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and shall include in the \"detail\" attribute more information about the source of the problem. If the request contains a malformed access token, the API producer should respond with this response. The details of the error shall be returned in the WWW Authenticate HTTP header, as defined in IETF RFC 6750 and IETF RFC 7235. The ProblemDetails structure may be provided. The use of this HTTP error response code described above is applicable to the use of the OAuth 2.0 for the authorization of API requests and notifications, as defined in clauses 4.5.3.3 and 4.5.3.4. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "401", description = "401 UNAUTHORIZED If the request contains no access token even though one is required, or if the request contains an authorization token that is invalid (e.g. expired or revoked), the API producer should respond with this response. The details of the error shall be returned in the WWW-Authenticate HTTP header, as defined in IETF RFC 6750 and IETF RFC 7235. The ProblemDetails structure may be provided. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "403", description = "403 FORBIDDEN If the API consumer is not allowed to perform a particular request to a particular resource, the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided. It should include in the \"detail\" attribute information about the source of the problem, and may indicate how to solve it. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "404", description = "404 NOT FOUND If the API producer did not find a current representation for the resource addressed by the URI passed in the request or is not willing to disclose that one exists, it shall respond with this response code. The \"ProblemDetails\" structure may be provided, including in the \"detail\" attribute information about the source of the problem, e.g. a wrong resource URI variable. This response code is not appropriate in case the resource addressed by the URI is a container resource which is designed to contain child resources, but does not contain any child resource at the time the request is received. For a GET request to an existing empty container resource, a typical response contains a 200 OK response code and a payload body with an empty array. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "405", description = "405 METHOD NOT ALLOWED If a particular HTTP method is not supported for a particular resource, the API producer shall respond with this response code. The \"ProblemDetails\" structure may be omitted. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "406", description = "406 NOT ACCEPTABLE If the \"Accept\" HTTP header does not contain at least one name of a content type that is acceptable to the API producer, the API producer shall respond with this response code. The \"ProblemDetails\" structure may be omitted. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "409", description = "409 CONFLICT ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "416", description = "416 Range Not Satisfiable ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "422", description = "422 UNPROCESSABLE ENTITY If the payload body of a request contains syntactically correct data (e.g. well-formed JSON) but the data cannot be processed (e.g. because it fails validation against a schema), the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and should include in the \"detail\" attribute more information about the source of the problem. This error response code is only applicable for methods that have a request body. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "429", description = "429 TOO MANY REQUESTS If the API consumer has sent too many requests in a defined period of time and the API producer is able to detect that condition (\"rate limiting\"), the API producer shall respond with this response code, following the provisions in IETF RFC 6585 [17] for the use of the \"Retry-After\" HTTP header. The \"ProblemDetails\" structure shall be provided and shall include in the \"detail\" attribute more information about the source of the problem. The period of time and allowed number of requests are configured within the API producer by means outside the scope of the present document. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "500", description = "500 INTERNAL SERVER ERROR If there is an application error not related to the client's input that cannot be easily mapped to any other HTTP response code (\"catch all error\"), the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and shall include in the \"detail\" attribute more information about the source of the problem. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "503", description = "503 SERVICE UNAVAILABLE If the API producer encounters an internal overload situation of itself or of a system it relies on, it should respond with this response code, following the provisions in IETF RFC 7231 for the use of the \"Retry-After\" HTTP header and for the alternative to refuse the connection. The \"ProblemDetails\" structure may be omitted. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "504", description = "504 GATEWAY TIMEOUT If the API producer encounters a timeout while waiting for a response from an upstream server (i.e. a server that the API producer communicates with when fulfilling a request), it should respond with this response code. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))) })
	@RequestMapping(value = "/vnf_instances/{vnfInstanceId}/create_snapshot", produces = { "application/json" }, consumes = { "application/json" }, method = RequestMethod.POST)
	default ResponseEntity<Void> vnfInstancesVnfInstanceIdCreateSnapshotPost(@Parameter(in = ParameterIn.HEADER, description = "Version of the API requested to use when responding to this request. ", required = true, schema = @Schema()) @RequestHeader(value = "Version", required = true) final String version, @Parameter(in = ParameterIn.PATH, description = "Identifier of the VNF instance. This identifier can be retrieved from the resource referenced by the \"Location\" HTTP header in the response to a POST request creating a new VNF instance resource. It can also be retrieved from the \"id\" attribute in the payload body of that response. ", required = true, schema = @Schema()) @PathVariable("vnfInstanceId") final String vnfInstanceId, @Parameter(in = ParameterIn.DEFAULT, description = "Parameters for the “Create VNF/VNFC Snapshot” operation.", required = true, schema = @Schema()) @Valid @RequestBody final CreateVnfSnapshotRequest body, @Parameter(in = ParameterIn.HEADER, description = "The authorization token for the request. Reference: IETF RFC 7235. ", schema = @Schema()) @RequestHeader(value = "Authorization", required = false) final String authorization) {
		if (getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
		} else {
			log.warn("ObjectMapper or HttpServletRequest not configured in default VnfInstancesApi interface so no example is generated");
		}
		return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
	}

	@Operation(summary = "", description = "This method deletes an \"Individual VNF instance\" resource. ", tags = {})
	@ApiResponses(value = {
			@ApiResponse(responseCode = "204", description = "204 NO CONTENT The \"Individual VNF instance\" resource and the associated VNF identifier were deleted successfully. The response body shall be empty. ", content = @Content(schema = @Schema(implementation = VnfIdentifierDeletionNotification.class))),

			@ApiResponse(responseCode = "400", description = "400 BAD REQUEST 400 code can be returned in the following specified cases, the specific cause has to be proper specified in the \"ProblemDetails\" structure to be returned. If the request is malformed or syntactically incorrect (e.g. if the request URI contains incorrect query parameters or the payload body contains a syntactically incorrect data structure), the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and should include in the \"detail\" attribute more information about the source of the problem. If the response to a GET request which queries a container resource would be so big that the performance of the API producer is adversely affected, and the API producer does not support paging for the affected resource, it shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and should include in the \"detail\" attribute more information about the source of the problem. If there is an application error related to the client's input that cannot be easily mapped to any other HTTP response code (\"catch all error\"), the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and shall include in the \"detail\" attribute more information about the source of the problem. If the request contains a malformed access token, the API producer should respond with this response. The details of the error shall be returned in the WWW Authenticate HTTP header, as defined in IETF RFC 6750 and IETF RFC 7235. The ProblemDetails structure may be provided. The use of this HTTP error response code described above is applicable to the use of the OAuth 2.0 for the authorization of API requests and notifications, as defined in clauses 4.5.3.3 and 4.5.3.4. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "401", description = "401 UNAUTHORIZED If the request contains no access token even though one is required, or if the request contains an authorization token that is invalid (e.g. expired or revoked), the API producer should respond with this response. The details of the error shall be returned in the WWW-Authenticate HTTP header, as defined in IETF RFC 6750 and IETF RFC 7235. The ProblemDetails structure may be provided. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "403", description = "403 FORBIDDEN If the API consumer is not allowed to perform a particular request to a particular resource, the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided. It should include in the \"detail\" attribute information about the source of the problem, and may indicate how to solve it. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "404", description = "404 NOT FOUND If the API producer did not find a current representation for the resource addressed by the URI passed in the request or is not willing to disclose that one exists, it shall respond with this response code. The \"ProblemDetails\" structure may be provided, including in the \"detail\" attribute information about the source of the problem, e.g. a wrong resource URI variable. This response code is not appropriate in case the resource addressed by the URI is a container resource which is designed to contain child resources, but does not contain any child resource at the time the request is received. For a GET request to an existing empty container resource, a typical response contains a 200 OK response code and a payload body with an empty array. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "405", description = "405 METHOD NOT ALLOWED If a particular HTTP method is not supported for a particular resource, the API producer shall respond with this response code. The \"ProblemDetails\" structure may be omitted. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "406", description = "406 NOT ACCEPTABLE If the \"Accept\" HTTP header does not contain at least one name of a content type that is acceptable to the API producer, the API producer shall respond with this response code. The \"ProblemDetails\" structure may be omitted. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "409", description = "409 CONFLICT ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "416", description = "416 Range Not Satisfiable ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "422", description = "422 UNPROCESSABLE ENTITY If the payload body of a request contains syntactically correct data (e.g. well-formed JSON) but the data cannot be processed (e.g. because it fails validation against a schema), the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and should include in the \"detail\" attribute more information about the source of the problem. This error response code is only applicable for methods that have a request body. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "429", description = "429 TOO MANY REQUESTS If the API consumer has sent too many requests in a defined period of time and the API producer is able to detect that condition (\"rate limiting\"), the API producer shall respond with this response code, following the provisions in IETF RFC 6585 [17] for the use of the \"Retry-After\" HTTP header. The \"ProblemDetails\" structure shall be provided and shall include in the \"detail\" attribute more information about the source of the problem. The period of time and allowed number of requests are configured within the API producer by means outside the scope of the present document. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "500", description = "500 INTERNAL SERVER ERROR If there is an application error not related to the client's input that cannot be easily mapped to any other HTTP response code (\"catch all error\"), the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and shall include in the \"detail\" attribute more information about the source of the problem. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "503", description = "503 SERVICE UNAVAILABLE If the API producer encounters an internal overload situation of itself or of a system it relies on, it should respond with this response code, following the provisions in IETF RFC 7231 for the use of the \"Retry-After\" HTTP header and for the alternative to refuse the connection. The \"ProblemDetails\" structure may be omitted. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "504", description = "504 GATEWAY TIMEOUT If the API producer encounters a timeout while waiting for a response from an upstream server (i.e. a server that the API producer communicates with when fulfilling a request), it should respond with this response code. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))) })
	@RequestMapping(value = "/vnf_instances/{vnfInstanceId}", produces = { "application/json" }, method = RequestMethod.DELETE)
	default ResponseEntity<VnfIdentifierDeletionNotification> vnfInstancesVnfInstanceIdDelete(@Parameter(in = ParameterIn.PATH, description = "Identifier of the VNF instance. This identifier can be retrieved from the resource referenced by the \"Location\" HTTP header in the response to a POST request creating a new VNF instance resource. It can also be retrieved from the \"id\" attribute in the payload body of that response. ", required = true, schema = @Schema()) @PathVariable("vnfInstanceId") final String vnfInstanceId, @Parameter(in = ParameterIn.HEADER, description = "Version of the API requested to use when responding to this request. ", required = true, schema = @Schema()) @RequestHeader(value = "Version", required = true) final String version, @Parameter(in = ParameterIn.HEADER, description = "The authorization token for the request. Reference: IETF RFC 7235. ", schema = @Schema()) @RequestHeader(value = "Authorization", required = false) final String authorization) {
		if (getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
			if (getAcceptHeader().get().contains("application/json")) {
				try {
					return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"timeStamp\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"_links\" : {\n    \"vnfInstance\" : {\n      \"href\" : \"href\"\n    }\n  },\n  \"id\" : \"id\",\n  \"notificationType\" : \"VnfIdentifierDeletionNotification\"\n}", VnfIdentifierDeletionNotification.class), HttpStatus.NOT_IMPLEMENTED);
				} catch (final IOException e) {
					log.error("Couldn't serialize response for content type application/json", e);
					return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
				}
			}
		} else {
			log.warn("ObjectMapper or HttpServletRequest not configured in default VnfInstancesApi interface so no example is generated");
		}
		return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
	}

	@Operation(summary = "", description = "Information about a VNF instance by reading an \"Individual VNF instance\". ", tags = {})
	@ApiResponses(value = {
			@ApiResponse(responseCode = "200", description = "200 OK Information about an individual VNF instance has been read successfully. The response body shall contain a representation of the VNF instance, as defined in clause 5.5.2.2. ", content = @Content(schema = @Schema(implementation = VnfInstance.class))),

			@ApiResponse(responseCode = "400", description = "400 BAD REQUEST 400 code can be returned in the following specified cases, the specific cause has to be proper specified in the \"ProblemDetails\" structure to be returned. If the request is malformed or syntactically incorrect (e.g. if the request URI contains incorrect query parameters or the payload body contains a syntactically incorrect data structure), the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and should include in the \"detail\" attribute more information about the source of the problem. If the response to a GET request which queries a container resource would be so big that the performance of the API producer is adversely affected, and the API producer does not support paging for the affected resource, it shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and should include in the \"detail\" attribute more information about the source of the problem. If there is an application error related to the client's input that cannot be easily mapped to any other HTTP response code (\"catch all error\"), the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and shall include in the \"detail\" attribute more information about the source of the problem. If the request contains a malformed access token, the API producer should respond with this response. The details of the error shall be returned in the WWW Authenticate HTTP header, as defined in IETF RFC 6750 and IETF RFC 7235. The ProblemDetails structure may be provided. The use of this HTTP error response code described above is applicable to the use of the OAuth 2.0 for the authorization of API requests and notifications, as defined in clauses 4.5.3.3 and 4.5.3.4. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "401", description = "401 UNAUTHORIZED If the request contains no access token even though one is required, or if the request contains an authorization token that is invalid (e.g. expired or revoked), the API producer should respond with this response. The details of the error shall be returned in the WWW-Authenticate HTTP header, as defined in IETF RFC 6750 and IETF RFC 7235. The ProblemDetails structure may be provided. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "403", description = "403 FORBIDDEN If the API consumer is not allowed to perform a particular request to a particular resource, the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided. It should include in the \"detail\" attribute information about the source of the problem, and may indicate how to solve it. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "404", description = "404 NOT FOUND If the API producer did not find a current representation for the resource addressed by the URI passed in the request or is not willing to disclose that one exists, it shall respond with this response code. The \"ProblemDetails\" structure may be provided, including in the \"detail\" attribute information about the source of the problem, e.g. a wrong resource URI variable. This response code is not appropriate in case the resource addressed by the URI is a container resource which is designed to contain child resources, but does not contain any child resource at the time the request is received. For a GET request to an existing empty container resource, a typical response contains a 200 OK response code and a payload body with an empty array. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "405", description = "405 METHOD NOT ALLOWED If a particular HTTP method is not supported for a particular resource, the API producer shall respond with this response code. The \"ProblemDetails\" structure may be omitted. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "406", description = "406 NOT ACCEPTABLE If the \"Accept\" HTTP header does not contain at least one name of a content type that is acceptable to the API producer, the API producer shall respond with this response code. The \"ProblemDetails\" structure may be omitted. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "416", description = "416 Range Not Satisfiable ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "422", description = "422 UNPROCESSABLE ENTITY If the payload body of a request contains syntactically correct data (e.g. well-formed JSON) but the data cannot be processed (e.g. because it fails validation against a schema), the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and should include in the \"detail\" attribute more information about the source of the problem. This error response code is only applicable for methods that have a request body. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "429", description = "429 TOO MANY REQUESTS If the API consumer has sent too many requests in a defined period of time and the API producer is able to detect that condition (\"rate limiting\"), the API producer shall respond with this response code, following the provisions in IETF RFC 6585 [17] for the use of the \"Retry-After\" HTTP header. The \"ProblemDetails\" structure shall be provided and shall include in the \"detail\" attribute more information about the source of the problem. The period of time and allowed number of requests are configured within the API producer by means outside the scope of the present document. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "500", description = "500 INTERNAL SERVER ERROR If there is an application error not related to the client's input that cannot be easily mapped to any other HTTP response code (\"catch all error\"), the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and shall include in the \"detail\" attribute more information about the source of the problem. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "503", description = "503 SERVICE UNAVAILABLE If the API producer encounters an internal overload situation of itself or of a system it relies on, it should respond with this response code, following the provisions in IETF RFC 7231 for the use of the \"Retry-After\" HTTP header and for the alternative to refuse the connection. The \"ProblemDetails\" structure may be omitted. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "504", description = "504 GATEWAY TIMEOUT If the API producer encounters a timeout while waiting for a response from an upstream server (i.e. a server that the API producer communicates with when fulfilling a request), it should respond with this response code. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))) })
	@RequestMapping(value = "/vnf_instances/{vnfInstanceId}", produces = { "application/json" }, method = RequestMethod.GET)
	default ResponseEntity<VnfInstance> vnfInstancesVnfInstanceIdGet(@Parameter(in = ParameterIn.PATH, description = "Identifier of the VNF instance. This identifier can be retrieved from the resource referenced by the \"Location\" HTTP header in the response to a POST request creating a new VNF instance resource. It can also be retrieved from the \"id\" attribute in the payload body of that response. ", required = true, schema = @Schema()) @PathVariable("vnfInstanceId") final String vnfInstanceId, @Parameter(in = ParameterIn.HEADER, description = "Version of the API requested to use when responding to this request. ", required = true, schema = @Schema()) @RequestHeader(value = "Version", required = true) final String version, @Parameter(in = ParameterIn.HEADER, description = "The authorization token for the request. Reference: IETF RFC 7235. ", schema = @Schema()) @RequestHeader(value = "Authorization", required = false) final String authorization) {
		if (getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
			if (getAcceptHeader().get().contains("application/json")) {
				try {
					return new ResponseEntity<>(getObjectMapper().get().readValue(
							"{\n  \"vnfProductName\" : \"vnfProductName\",\n  \"vnfProvider\" : \"vnfProvider\",\n  \"_links\" : {\n    \"self\" : {\n      \"href\" : \"href\"\n    }\n  },\n  \"vnfConfigurableProperties\" : { },\n  \"instantiationState\" : \"NOT_INSTANTIATED\",\n  \"vnfInstanceDescription\" : \"vnfInstanceDescription\",\n  \"instantiatedVnfInfo\" : {\n    \"flavourId\" : \"flavourId\",\n    \"scaleStatus\" : [ {\n      \"scaleLevel\" : 0\n    }, {\n      \"scaleLevel\" : 0\n    } ],\n    \"extManagedVirtualLinkInfo\" : [ {\n      \"vnfLinkPorts\" : [ {\n        \"cpInstanceType\" : \"VNFC_CP\"\n      }, {\n        \"cpInstanceType\" : \"VNFC_CP\"\n      } ]\n    }, {\n      \"vnfLinkPorts\" : [ {\n        \"cpInstanceType\" : \"VNFC_CP\"\n      }, {\n        \"cpInstanceType\" : \"VNFC_CP\"\n      } ]\n    } ],\n    \"maxScaleLevels\" : [ null, null ],\n    \"vnfState\" : \"STARTED\",\n    \"monitoringParameters\" : [ {\n      \"name\" : \"name\",\n      \"performanceMetric\" : \"performanceMetric\"\n    }, {\n      \"name\" : \"name\",\n      \"performanceMetric\" : \"performanceMetric\"\n    } ],\n    \"vnfVirtualStorageResourceInfo\" : [ { }, { } ],\n    \"extVirtualLinkInfo\" : [ {\n      \"resourceHandle\" : {\n        \"vimLevelResourceType\" : \"vimLevelResourceType\"\n      },\n      \"extLinkPorts\" : [ { }, { } ],\n      \"currentVnfExtCpData\" : [ {\n        \"cpConfig\" : {\n          \"key\" : {\n            \"cpProtocolData\" : [ {\n              \"ipOverEthernet\" : {\n                \"ipAddresses\" : [ {\n                  \"fixedAddresses\" : [ null, null ],\n                  \"addressRange\" : { },\n                  \"type\" : \"IPV4\",\n                  \"numDynamicAddresses\" : 6\n                }, {\n                  \"fixedAddresses\" : [ null, null ],\n                  \"addressRange\" : { },\n                  \"type\" : \"IPV4\",\n                  \"numDynamicAddresses\" : 6\n                } ],\n                \"segmentationId\" : \"segmentationId\"\n              },\n              \"layerProtocol\" : \"IP_OVER_ETHERNET\"\n            }, {\n              \"ipOverEthernet\" : {\n                \"ipAddresses\" : [ {\n                  \"fixedAddresses\" : [ null, null ],\n                  \"addressRange\" : { },\n                  \"type\" : \"IPV4\",\n                  \"numDynamicAddresses\" : 6\n                }, {\n                  \"fixedAddresses\" : [ null, null ],\n                  \"addressRange\" : { },\n                  \"type\" : \"IPV4\",\n                  \"numDynamicAddresses\" : 6\n                } ],\n                \"segmentationId\" : \"segmentationId\"\n              },\n              \"layerProtocol\" : \"IP_OVER_ETHERNET\"\n            } ]\n          }\n        }\n      }, {\n        \"cpConfig\" : {\n          \"key\" : {\n            \"cpProtocolData\" : [ {\n              \"ipOverEthernet\" : {\n                \"ipAddresses\" : [ {\n                  \"fixedAddresses\" : [ null, null ],\n                  \"addressRange\" : { },\n                  \"type\" : \"IPV4\",\n                  \"numDynamicAddresses\" : 6\n                }, {\n                  \"fixedAddresses\" : [ null, null ],\n                  \"addressRange\" : { },\n                  \"type\" : \"IPV4\",\n                  \"numDynamicAddresses\" : 6\n                } ],\n                \"segmentationId\" : \"segmentationId\"\n              },\n              \"layerProtocol\" : \"IP_OVER_ETHERNET\"\n            }, {\n              \"ipOverEthernet\" : {\n                \"ipAddresses\" : [ {\n                  \"fixedAddresses\" : [ null, null ],\n                  \"addressRange\" : { },\n                  \"type\" : \"IPV4\",\n                  \"numDynamicAddresses\" : 6\n                }, {\n                  \"fixedAddresses\" : [ null, null ],\n                  \"addressRange\" : { },\n                  \"type\" : \"IPV4\",\n                  \"numDynamicAddresses\" : 6\n                } ],\n                \"segmentationId\" : \"segmentationId\"\n              },\n              \"layerProtocol\" : \"IP_OVER_ETHERNET\"\n            } ]\n          }\n        }\n      } ]\n    }, {\n      \"resourceHandle\" : {\n        \"vimLevelResourceType\" : \"vimLevelResourceType\"\n      },\n      \"extLinkPorts\" : [ { }, { } ],\n      \"currentVnfExtCpData\" : [ {\n        \"cpConfig\" : {\n          \"key\" : {\n            \"cpProtocolData\" : [ {\n              \"ipOverEthernet\" : {\n                \"ipAddresses\" : [ {\n                  \"fixedAddresses\" : [ null, null ],\n                  \"addressRange\" : { },\n                  \"type\" : \"IPV4\",\n                  \"numDynamicAddresses\" : 6\n                }, {\n                  \"fixedAddresses\" : [ null, null ],\n                  \"addressRange\" : { },\n                  \"type\" : \"IPV4\",\n                  \"numDynamicAddresses\" : 6\n                } ],\n                \"segmentationId\" : \"segmentationId\"\n              },\n              \"layerProtocol\" : \"IP_OVER_ETHERNET\"\n            }, {\n              \"ipOverEthernet\" : {\n                \"ipAddresses\" : [ {\n                  \"fixedAddresses\" : [ null, null ],\n                  \"addressRange\" : { },\n                  \"type\" : \"IPV4\",\n                  \"numDynamicAddresses\" : 6\n                }, {\n                  \"fixedAddresses\" : [ null, null ],\n                  \"addressRange\" : { },\n                  \"type\" : \"IPV4\",\n                  \"numDynamicAddresses\" : 6\n                } ],\n                \"segmentationId\" : \"segmentationId\"\n              },\n              \"layerProtocol\" : \"IP_OVER_ETHERNET\"\n            } ]\n          }\n        }\n      }, {\n        \"cpConfig\" : {\n          \"key\" : {\n            \"cpProtocolData\" : [ {\n              \"ipOverEthernet\" : {\n                \"ipAddresses\" : [ {\n                  \"fixedAddresses\" : [ null, null ],\n                  \"addressRange\" : { },\n                  \"type\" : \"IPV4\",\n                  \"numDynamicAddresses\" : 6\n                }, {\n                  \"fixedAddresses\" : [ null, null ],\n                  \"addressRange\" : { },\n                  \"type\" : \"IPV4\",\n                  \"numDynamicAddresses\" : 6\n                } ],\n                \"segmentationId\" : \"segmentationId\"\n              },\n              \"layerProtocol\" : \"IP_OVER_ETHERNET\"\n            }, {\n              \"ipOverEthernet\" : {\n                \"ipAddresses\" : [ {\n                  \"fixedAddresses\" : [ null, null ],\n                  \"addressRange\" : { },\n                  \"type\" : \"IPV4\",\n                  \"numDynamicAddresses\" : 6\n                }, {\n                  \"fixedAddresses\" : [ null, null ],\n                  \"addressRange\" : { },\n                  \"type\" : \"IPV4\",\n                  \"numDynamicAddresses\" : 6\n                } ],\n                \"segmentationId\" : \"segmentationId\"\n              },\n              \"layerProtocol\" : \"IP_OVER_ETHERNET\"\n            } ]\n          }\n        }\n      } ]\n    } ],\n    \"localizationLanguage\" : \"localizationLanguage\",\n    \"vnfVirtualLinkResourceInfo\" : [ {\n      \"vnfLinkPorts\" : [ null, null ]\n    }, {\n      \"vnfLinkPorts\" : [ null, null ]\n    } ],\n    \"vnfcResourceInfo\" : [ {\n      \"storageResourceIds\" : [ null, null ],\n      \"vnfcCpInfo\" : [ {\n        \"cpProtocolInfo\" : [ null, null ]\n      }, {\n        \"cpProtocolInfo\" : [ null, null ]\n      } ]\n    }, {\n      \"storageResourceIds\" : [ null, null ],\n      \"vnfcCpInfo\" : [ {\n        \"cpProtocolInfo\" : [ null, null ]\n      }, {\n        \"cpProtocolInfo\" : [ null, null ]\n      } ]\n    } ],\n    \"extCpInfo\" : [ {\n      \"cpProtocolInfo\" : [ {\n        \"ipOverEthernet\" : {\n          \"macAddress\" : \"macAddress\",\n          \"ipAddresses\" : [ {\n            \"subnetId\" : \"subnetId\",\n            \"addresses\" : [ \"addresses\", \"addresses\" ],\n            \"isDynamic\" : true,\n            \"addressRange\" : { },\n            \"type\" : \"IPV4\"\n          }, {\n            \"subnetId\" : \"subnetId\",\n            \"addresses\" : [ \"addresses\", \"addresses\" ],\n            \"isDynamic\" : true,\n            \"addressRange\" : { },\n            \"type\" : \"IPV4\"\n          } ],\n          \"segmentationId\" : \"segmentationId\"\n        },\n        \"layerProtocol\" : \"IP_OVER_ETHERNET\"\n      }, {\n        \"ipOverEthernet\" : {\n          \"macAddress\" : \"macAddress\",\n          \"ipAddresses\" : [ {\n            \"subnetId\" : \"subnetId\",\n            \"addresses\" : [ \"addresses\", \"addresses\" ],\n            \"isDynamic\" : true,\n            \"addressRange\" : { },\n            \"type\" : \"IPV4\"\n          }, {\n            \"subnetId\" : \"subnetId\",\n            \"addresses\" : [ \"addresses\", \"addresses\" ],\n            \"isDynamic\" : true,\n            \"addressRange\" : { },\n            \"type\" : \"IPV4\"\n          } ],\n          \"segmentationId\" : \"segmentationId\"\n        },\n        \"layerProtocol\" : \"IP_OVER_ETHERNET\"\n      } ],\n      \"id\" : \"id\"\n    }, {\n      \"cpProtocolInfo\" : [ {\n        \"ipOverEthernet\" : {\n          \"macAddress\" : \"macAddress\",\n          \"ipAddresses\" : [ {\n            \"subnetId\" : \"subnetId\",\n            \"addresses\" : [ \"addresses\", \"addresses\" ],\n            \"isDynamic\" : true,\n            \"addressRange\" : { },\n            \"type\" : \"IPV4\"\n          }, {\n            \"subnetId\" : \"subnetId\",\n            \"addresses\" : [ \"addresses\", \"addresses\" ],\n            \"isDynamic\" : true,\n            \"addressRange\" : { },\n            \"type\" : \"IPV4\"\n          } ],\n          \"segmentationId\" : \"segmentationId\"\n        },\n        \"layerProtocol\" : \"IP_OVER_ETHERNET\"\n      }, {\n        \"ipOverEthernet\" : {\n          \"macAddress\" : \"macAddress\",\n          \"ipAddresses\" : [ {\n            \"subnetId\" : \"subnetId\",\n            \"addresses\" : [ \"addresses\", \"addresses\" ],\n            \"isDynamic\" : true,\n            \"addressRange\" : { },\n            \"type\" : \"IPV4\"\n          }, {\n            \"subnetId\" : \"subnetId\",\n            \"addresses\" : [ \"addresses\", \"addresses\" ],\n            \"isDynamic\" : true,\n            \"addressRange\" : { },\n            \"type\" : \"IPV4\"\n          } ],\n          \"segmentationId\" : \"segmentationId\"\n        },\n        \"layerProtocol\" : \"IP_OVER_ETHERNET\"\n      } ],\n      \"id\" : \"id\"\n    } ],\n    \"vnfcInfo\" : [ { }, { } ]\n  },\n  \"vnfInstanceName\" : \"vnfInstanceName\",\n  \"id\" : \"id\",\n  \"vnfSoftwareVersion\" : \"vnfSoftwareVersion\"\n}",
							VnfInstance.class), HttpStatus.NOT_IMPLEMENTED);
				} catch (final IOException e) {
					log.error("Couldn't serialize response for content type application/json", e);
					return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
				}
			}
		} else {
			log.warn("ObjectMapper or HttpServletRequest not configured in default VnfInstancesApi interface so no example is generated");
		}
		return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
	}

	@Operation(summary = "", description = "The POST method requests to heal a VNF instance. ", tags = {})
	@ApiResponses(value = {
			@ApiResponse(responseCode = "202", description = "202 ACCEPTED The request has been accepted for processing, but the processing has not been completed. The response body shall be empty. The HTTP response shall include a \"Location\" HTTP header that contains the URI of the newly-created \"Individual VNF LCM operation occurrence\" resource corresponding to the operation. "),

			@ApiResponse(responseCode = "400", description = "400 BAD REQUEST 400 code can be returned in the following specified cases, the specific cause has to be proper specified in the \"ProblemDetails\" structure to be returned. If the request is malformed or syntactically incorrect (e.g. if the request URI contains incorrect query parameters or the payload body contains a syntactically incorrect data structure), the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and should include in the \"detail\" attribute more information about the source of the problem. If the response to a GET request which queries a container resource would be so big that the performance of the API producer is adversely affected, and the API producer does not support paging for the affected resource, it shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and should include in the \"detail\" attribute more information about the source of the problem. If there is an application error related to the client's input that cannot be easily mapped to any other HTTP response code (\"catch all error\"), the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and shall include in the \"detail\" attribute more information about the source of the problem. If the request contains a malformed access token, the API producer should respond with this response. The details of the error shall be returned in the WWW Authenticate HTTP header, as defined in IETF RFC 6750 and IETF RFC 7235. The ProblemDetails structure may be provided. The use of this HTTP error response code described above is applicable to the use of the OAuth 2.0 for the authorization of API requests and notifications, as defined in clauses 4.5.3.3 and 4.5.3.4. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "401", description = "401 UNAUTHORIZED If the request contains no access token even though one is required, or if the request contains an authorization token that is invalid (e.g. expired or revoked), the API producer should respond with this response. The details of the error shall be returned in the WWW-Authenticate HTTP header, as defined in IETF RFC 6750 and IETF RFC 7235. The ProblemDetails structure may be provided. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "403", description = "403 FORBIDDEN If the API consumer is not allowed to perform a particular request to a particular resource, the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided. It should include in the \"detail\" attribute information about the source of the problem, and may indicate how to solve it. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "404", description = "404 NOT FOUND If the API producer did not find a current representation for the resource addressed by the URI passed in the request or is not willing to disclose that one exists, it shall respond with this response code. The \"ProblemDetails\" structure may be provided, including in the \"detail\" attribute information about the source of the problem, e.g. a wrong resource URI variable. This response code is not appropriate in case the resource addressed by the URI is a container resource which is designed to contain child resources, but does not contain any child resource at the time the request is received. For a GET request to an existing empty container resource, a typical response contains a 200 OK response code and a payload body with an empty array. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "405", description = "405 METHOD NOT ALLOWED If a particular HTTP method is not supported for a particular resource, the API producer shall respond with this response code. The \"ProblemDetails\" structure may be omitted. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "406", description = "406 NOT ACCEPTABLE If the \"Accept\" HTTP header does not contain at least one name of a content type that is acceptable to the API producer, the API producer shall respond with this response code. The \"ProblemDetails\" structure may be omitted. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "409", description = "409 CONFLICT ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "416", description = "416 Range Not Satisfiable ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "422", description = "422 UNPROCESSABLE ENTITY If the payload body of a request contains syntactically correct data (e.g. well-formed JSON) but the data cannot be processed (e.g. because it fails validation against a schema), the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and should include in the \"detail\" attribute more information about the source of the problem. This error response code is only applicable for methods that have a request body. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "429", description = "429 TOO MANY REQUESTS If the API consumer has sent too many requests in a defined period of time and the API producer is able to detect that condition (\"rate limiting\"), the API producer shall respond with this response code, following the provisions in IETF RFC 6585 [17] for the use of the \"Retry-After\" HTTP header. The \"ProblemDetails\" structure shall be provided and shall include in the \"detail\" attribute more information about the source of the problem. The period of time and allowed number of requests are configured within the API producer by means outside the scope of the present document. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "500", description = "500 INTERNAL SERVER ERROR If there is an application error not related to the client's input that cannot be easily mapped to any other HTTP response code (\"catch all error\"), the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and shall include in the \"detail\" attribute more information about the source of the problem. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "503", description = "503 SERVICE UNAVAILABLE If the API producer encounters an internal overload situation of itself or of a system it relies on, it should respond with this response code, following the provisions in IETF RFC 7231 for the use of the \"Retry-After\" HTTP header and for the alternative to refuse the connection. The \"ProblemDetails\" structure may be omitted. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "504", description = "504 GATEWAY TIMEOUT If the API producer encounters a timeout while waiting for a response from an upstream server (i.e. a server that the API producer communicates with when fulfilling a request), it should respond with this response code. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))) })
	@RequestMapping(value = "/vnf_instances/{vnfInstanceId}/heal", produces = { "application/json" }, consumes = { "application/json" }, method = RequestMethod.POST)
	default ResponseEntity<Void> vnfInstancesVnfInstanceIdHealPost(@Parameter(in = ParameterIn.HEADER, description = "Version of the API requested to use when responding to this request. ", required = true, schema = @Schema()) @RequestHeader(value = "Version", required = true) final String version, @Parameter(in = ParameterIn.PATH, description = "Identifier of the VNF instance. This identifier can be retrieved from the resource referenced by the \"Location\" HTTP header in the response to a POST request creating a new VNF instance resource. It can also be retrieved from the \"id\" attribute in the payload body of that response. ", required = true, schema = @Schema()) @PathVariable("vnfInstanceId") final String vnfInstanceId, @Parameter(in = ParameterIn.DEFAULT, description = "Parameters for the Heal VNF operation.", required = true, schema = @Schema()) @Valid @RequestBody final HealVnfRequest body, @Parameter(in = ParameterIn.HEADER, description = "The authorization token for the request. Reference: IETF RFC 7235. ", schema = @Schema()) @RequestHeader(value = "Authorization", required = false) final String authorization) {
		if (getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
		} else {
			log.warn("ObjectMapper or HttpServletRequest not configured in default VnfInstancesApi interface so no example is generated");
		}
		return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
	}

	@Operation(summary = "", description = "The POST method instantiates a VNF instance. ", tags = {})
	@ApiResponses(value = {
			@ApiResponse(responseCode = "202", description = "202 ACCEPTED The request has been accepted for processing, but the processing has not been completed. The response body shall be empty. The HTTP response shall include a \"Location\" HTTP header that contains the URI of the newly-created \"VNF LCM operation occurrence\" resource corresponding to the operation. "),

			@ApiResponse(responseCode = "400", description = "400 BAD REQUEST 400 code can be returned in the following specified cases, the specific cause has to be proper specified in the \"ProblemDetails\" structure to be returned. If the request is malformed or syntactically incorrect (e.g. if the request URI contains incorrect query parameters or the payload body contains a syntactically incorrect data structure), the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and should include in the \"detail\" attribute more information about the source of the problem. If the response to a GET request which queries a container resource would be so big that the performance of the API producer is adversely affected, and the API producer does not support paging for the affected resource, it shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and should include in the \"detail\" attribute more information about the source of the problem. If there is an application error related to the client's input that cannot be easily mapped to any other HTTP response code (\"catch all error\"), the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and shall include in the \"detail\" attribute more information about the source of the problem. If the request contains a malformed access token, the API producer should respond with this response. The details of the error shall be returned in the WWW Authenticate HTTP header, as defined in IETF RFC 6750 and IETF RFC 7235. The ProblemDetails structure may be provided. The use of this HTTP error response code described above is applicable to the use of the OAuth 2.0 for the authorization of API requests and notifications, as defined in clauses 4.5.3.3 and 4.5.3.4. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "401", description = "401 UNAUTHORIZED If the request contains no access token even though one is required, or if the request contains an authorization token that is invalid (e.g. expired or revoked), the API producer should respond with this response. The details of the error shall be returned in the WWW-Authenticate HTTP header, as defined in IETF RFC 6750 and IETF RFC 7235. The ProblemDetails structure may be provided. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "403", description = "403 FORBIDDEN If the API consumer is not allowed to perform a particular request to a particular resource, the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided. It should include in the \"detail\" attribute information about the source of the problem, and may indicate how to solve it. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "404", description = "404 NOT FOUND If the API producer did not find a current representation for the resource addressed by the URI passed in the request or is not willing to disclose that one exists, it shall respond with this response code. The \"ProblemDetails\" structure may be provided, including in the \"detail\" attribute information about the source of the problem, e.g. a wrong resource URI variable. This response code is not appropriate in case the resource addressed by the URI is a container resource which is designed to contain child resources, but does not contain any child resource at the time the request is received. For a GET request to an existing empty container resource, a typical response contains a 200 OK response code and a payload body with an empty array. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "405", description = "405 METHOD NOT ALLOWED If a particular HTTP method is not supported for a particular resource, the API producer shall respond with this response code. The \"ProblemDetails\" structure may be omitted. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "406", description = "406 NOT ACCEPTABLE If the \"Accept\" HTTP header does not contain at least one name of a content type that is acceptable to the API producer, the API producer shall respond with this response code. The \"ProblemDetails\" structure may be omitted. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "409", description = "409 CONFLICT ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "416", description = "416 Range Not Satisfiable ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "422", description = "422 UNPROCESSABLE ENTITY If the payload body of a request contains syntactically correct data (e.g. well-formed JSON) but the data cannot be processed (e.g. because it fails validation against a schema), the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and should include in the \"detail\" attribute more information about the source of the problem. This error response code is only applicable for methods that have a request body. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "429", description = "429 TOO MANY REQUESTS If the API consumer has sent too many requests in a defined period of time and the API producer is able to detect that condition (\"rate limiting\"), the API producer shall respond with this response code, following the provisions in IETF RFC 6585 [17] for the use of the \"Retry-After\" HTTP header. The \"ProblemDetails\" structure shall be provided and shall include in the \"detail\" attribute more information about the source of the problem. The period of time and allowed number of requests are configured within the API producer by means outside the scope of the present document. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "500", description = "500 INTERNAL SERVER ERROR If there is an application error not related to the client's input that cannot be easily mapped to any other HTTP response code (\"catch all error\"), the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and shall include in the \"detail\" attribute more information about the source of the problem. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "503", description = "503 SERVICE UNAVAILABLE If the API producer encounters an internal overload situation of itself or of a system it relies on, it should respond with this response code, following the provisions in IETF RFC 7231 for the use of the \"Retry-After\" HTTP header and for the alternative to refuse the connection. The \"ProblemDetails\" structure may be omitted. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "504", description = "504 GATEWAY TIMEOUT If the API producer encounters a timeout while waiting for a response from an upstream server (i.e. a server that the API producer communicates with when fulfilling a request), it should respond with this response code. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))) })
	@RequestMapping(value = "/vnf_instances/{vnfInstanceId}/instantiate", produces = { "application/json" }, consumes = { "application/json" }, method = RequestMethod.POST)
	default ResponseEntity<Void> vnfInstancesVnfInstanceIdInstantiatePost(@Parameter(in = ParameterIn.HEADER, description = "Version of the API requested to use when responding to this request. ", required = true, schema = @Schema()) @RequestHeader(value = "Version", required = true) final String version, @Parameter(in = ParameterIn.PATH, description = "Identifier of the VNF instance. This identifier can be retrieved from the resource referenced by the \"Location\" HTTP header in the response to a POST request creating a new VNF instance resource. It can also be retrieved from the \"id\" attribute in the payload body of that response. ", required = true, schema = @Schema()) @PathVariable("vnfInstanceId") final String vnfInstanceId, @Parameter(in = ParameterIn.DEFAULT, description = "Parameters for the VNF instantiation.", required = true, schema = @Schema()) @Valid @RequestBody final InstantiateVnfRequest body, @Parameter(in = ParameterIn.HEADER, description = "The authorization token for the request. Reference: IETF RFC 7235. ", schema = @Schema()) @RequestHeader(value = "Authorization", required = false) final String authorization) {
		if (getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
		} else {
			log.warn("ObjectMapper or HttpServletRequest not configured in default VnfInstancesApi interface so no example is generated");
		}
		return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
	}

	@Operation(summary = "", description = "The POST method changes the operational state of a VNF instance. ", tags = {})
	@ApiResponses(value = {
			@ApiResponse(responseCode = "202", description = "202 ACCEPTED The request has been accepted for processing, but the processing has not been completed. The response body shall be empty. The HTTP response shall include a \"Location\" HTTP header that contains the URI of the newly-created \"VNF LCM operation occurrence\" resource corresponding to the operation. "),

			@ApiResponse(responseCode = "400", description = "400 BAD REQUEST 400 code can be returned in the following specified cases, the specific cause has to be proper specified in the \"ProblemDetails\" structure to be returned. If the request is malformed or syntactically incorrect (e.g. if the request URI contains incorrect query parameters or the payload body contains a syntactically incorrect data structure), the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and should include in the \"detail\" attribute more information about the source of the problem. If the response to a GET request which queries a container resource would be so big that the performance of the API producer is adversely affected, and the API producer does not support paging for the affected resource, it shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and should include in the \"detail\" attribute more information about the source of the problem. If there is an application error related to the client's input that cannot be easily mapped to any other HTTP response code (\"catch all error\"), the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and shall include in the \"detail\" attribute more information about the source of the problem. If the request contains a malformed access token, the API producer should respond with this response. The details of the error shall be returned in the WWW Authenticate HTTP header, as defined in IETF RFC 6750 and IETF RFC 7235. The ProblemDetails structure may be provided. The use of this HTTP error response code described above is applicable to the use of the OAuth 2.0 for the authorization of API requests and notifications, as defined in clauses 4.5.3.3 and 4.5.3.4. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "401", description = "401 UNAUTHORIZED If the request contains no access token even though one is required, or if the request contains an authorization token that is invalid (e.g. expired or revoked), the API producer should respond with this response. The details of the error shall be returned in the WWW-Authenticate HTTP header, as defined in IETF RFC 6750 and IETF RFC 7235. The ProblemDetails structure may be provided. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "403", description = "403 FORBIDDEN If the API consumer is not allowed to perform a particular request to a particular resource, the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided. It should include in the \"detail\" attribute information about the source of the problem, and may indicate how to solve it. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "404", description = "404 NOT FOUND If the API producer did not find a current representation for the resource addressed by the URI passed in the request or is not willing to disclose that one exists, it shall respond with this response code. The \"ProblemDetails\" structure may be provided, including in the \"detail\" attribute information about the source of the problem, e.g. a wrong resource URI variable. This response code is not appropriate in case the resource addressed by the URI is a container resource which is designed to contain child resources, but does not contain any child resource at the time the request is received. For a GET request to an existing empty container resource, a typical response contains a 200 OK response code and a payload body with an empty array. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "405", description = "405 METHOD NOT ALLOWED If a particular HTTP method is not supported for a particular resource, the API producer shall respond with this response code. The \"ProblemDetails\" structure may be omitted. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "406", description = "406 NOT ACCEPTABLE If the \"Accept\" HTTP header does not contain at least one name of a content type that is acceptable to the API producer, the API producer shall respond with this response code. The \"ProblemDetails\" structure may be omitted. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "409", description = "409 CONFLICT ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "416", description = "416 Range Not Satisfiable ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "422", description = "422 UNPROCESSABLE ENTITY If the payload body of a request contains syntactically correct data (e.g. well-formed JSON) but the data cannot be processed (e.g. because it fails validation against a schema), the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and should include in the \"detail\" attribute more information about the source of the problem. This error response code is only applicable for methods that have a request body. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "429", description = "429 TOO MANY REQUESTS If the API consumer has sent too many requests in a defined period of time and the API producer is able to detect that condition (\"rate limiting\"), the API producer shall respond with this response code, following the provisions in IETF RFC 6585 [17] for the use of the \"Retry-After\" HTTP header. The \"ProblemDetails\" structure shall be provided and shall include in the \"detail\" attribute more information about the source of the problem. The period of time and allowed number of requests are configured within the API producer by means outside the scope of the present document. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "500", description = "500 INTERNAL SERVER ERROR If there is an application error not related to the client's input that cannot be easily mapped to any other HTTP response code (\"catch all error\"), the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and shall include in the \"detail\" attribute more information about the source of the problem. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "503", description = "503 SERVICE UNAVAILABLE If the API producer encounters an internal overload situation of itself or of a system it relies on, it should respond with this response code, following the provisions in IETF RFC 7231 for the use of the \"Retry-After\" HTTP header and for the alternative to refuse the connection. The \"ProblemDetails\" structure may be omitted. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "504", description = "504 GATEWAY TIMEOUT If the API producer encounters a timeout while waiting for a response from an upstream server (i.e. a server that the API producer communicates with when fulfilling a request), it should respond with this response code. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))) })
	@RequestMapping(value = "/vnf_instances/{vnfInstanceId}/operate", produces = { "application/json" }, consumes = { "application/json" }, method = RequestMethod.POST)
	default ResponseEntity<Void> vnfInstancesVnfInstanceIdOperatePost(@Parameter(in = ParameterIn.HEADER, description = "Version of the API requested to use when responding to this request. ", required = true, schema = @Schema()) @RequestHeader(value = "Version", required = true) final String version, @Parameter(in = ParameterIn.PATH, description = "Identifier of the VNF instance. This identifier can be retrieved from the resource referenced by the \"Location\" HTTP header in the response to a POST request creating a new VNF instance resource. It can also be retrieved from the \"id\" attribute in the payload body of that response. ", required = true, schema = @Schema()) @PathVariable("vnfInstanceId") final String vnfInstanceId, @Parameter(in = ParameterIn.DEFAULT, description = "Parameters for the Operate VNF operation.", required = true, schema = @Schema()) @Valid @RequestBody final OperateVnfRequest body, @Parameter(in = ParameterIn.HEADER, description = "The authorization token for the request. Reference: IETF RFC 7235. ", schema = @Schema()) @RequestHeader(value = "Authorization", required = false) final String authorization) {
		if (getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
		} else {
			log.warn("ObjectMapper or HttpServletRequest not configured in default VnfInstancesApi interface so no example is generated");
		}
		return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
	}

	@Operation(summary = "", description = "This method modifies an \"Individual VNF instance\" resource. Changes to the VNF configurable properties are applied to the configuration in the VNF instance, and are reflected in the representation of this resource. Other changes are applied to the VNF instance information managed by the VNFM, and are reflected in the representation of this resource. ", tags = {})
	@ApiResponses(value = {
			@ApiResponse(responseCode = "202", description = "202 ACCEPTED The request was accepted for processing, but the processing has not been completed. On success, the HTTP response shall include a \"Location\" HTTP header that contains the URI of the newly-created an \"Individual VNF LCM operation occurrence\" resource  corresponding to the operation. The response body shall be empty. "),

			@ApiResponse(responseCode = "400", description = "400 BAD REQUEST 400 code can be returned in the following specified cases, the specific cause has to be proper specified in the \"ProblemDetails\" structure to be returned. If the request is malformed or syntactically incorrect (e.g. if the request URI contains incorrect query parameters or the payload body contains a syntactically incorrect data structure), the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and should include in the \"detail\" attribute more information about the source of the problem. If the response to a GET request which queries a container resource would be so big that the performance of the API producer is adversely affected, and the API producer does not support paging for the affected resource, it shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and should include in the \"detail\" attribute more information about the source of the problem. If there is an application error related to the client's input that cannot be easily mapped to any other HTTP response code (\"catch all error\"), the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and shall include in the \"detail\" attribute more information about the source of the problem. If the request contains a malformed access token, the API producer should respond with this response. The details of the error shall be returned in the WWW Authenticate HTTP header, as defined in IETF RFC 6750 and IETF RFC 7235. The ProblemDetails structure may be provided. The use of this HTTP error response code described above is applicable to the use of the OAuth 2.0 for the authorization of API requests and notifications, as defined in clauses 4.5.3.3 and 4.5.3.4. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "401", description = "401 UNAUTHORIZED If the request contains no access token even though one is required, or if the request contains an authorization token that is invalid (e.g. expired or revoked), the API producer should respond with this response. The details of the error shall be returned in the WWW-Authenticate HTTP header, as defined in IETF RFC 6750 and IETF RFC 7235. The ProblemDetails structure may be provided. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "403", description = "403 FORBIDDEN If the API consumer is not allowed to perform a particular request to a particular resource, the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided. It should include in the \"detail\" attribute information about the source of the problem, and may indicate how to solve it. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "404", description = "404 NOT FOUND If the API producer did not find a current representation for the resource addressed by the URI passed in the request or is not willing to disclose that one exists, it shall respond with this response code. The \"ProblemDetails\" structure may be provided, including in the \"detail\" attribute information about the source of the problem, e.g. a wrong resource URI variable. This response code is not appropriate in case the resource addressed by the URI is a container resource which is designed to contain child resources, but does not contain any child resource at the time the request is received. For a GET request to an existing empty container resource, a typical response contains a 200 OK response code and a payload body with an empty array. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "405", description = "405 METHOD NOT ALLOWED If a particular HTTP method is not supported for a particular resource, the API producer shall respond with this response code. The \"ProblemDetails\" structure may be omitted. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "406", description = "406 NOT ACCEPTABLE If the \"Accept\" HTTP header does not contain at least one name of a content type that is acceptable to the API producer, the API producer shall respond with this response code. The \"ProblemDetails\" structure may be omitted. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "409", description = "409 CONFLICT ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "412", description = "412 PRECONDITION FAILED Error: A precondition given in an HTTP request header is not fulfilled. Typically, this is due to an ETag mismatch, indicating that the resource was modified by another entity. The response body should contain a ProblemDetails structure, in which the \"detail\" attribute should convey more information about the error. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "416", description = "416 Range Not Satisfiable ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "422", description = "422 UNPROCESSABLE ENTITY If the payload body of a request contains syntactically correct data (e.g. well-formed JSON) but the data cannot be processed (e.g. because it fails validation against a schema), the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and should include in the \"detail\" attribute more information about the source of the problem. This error response code is only applicable for methods that have a request body. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "429", description = "429 TOO MANY REQUESTS If the API consumer has sent too many requests in a defined period of time and the API producer is able to detect that condition (\"rate limiting\"), the API producer shall respond with this response code, following the provisions in IETF RFC 6585 [17] for the use of the \"Retry-After\" HTTP header. The \"ProblemDetails\" structure shall be provided and shall include in the \"detail\" attribute more information about the source of the problem. The period of time and allowed number of requests are configured within the API producer by means outside the scope of the present document. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "500", description = "500 INTERNAL SERVER ERROR If there is an application error not related to the client's input that cannot be easily mapped to any other HTTP response code (\"catch all error\"), the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and shall include in the \"detail\" attribute more information about the source of the problem. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "503", description = "503 SERVICE UNAVAILABLE If the API producer encounters an internal overload situation of itself or of a system it relies on, it should respond with this response code, following the provisions in IETF RFC 7231 for the use of the \"Retry-After\" HTTP header and for the alternative to refuse the connection. The \"ProblemDetails\" structure may be omitted. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "504", description = "504 GATEWAY TIMEOUT If the API producer encounters a timeout while waiting for a response from an upstream server (i.e. a server that the API producer communicates with when fulfilling a request), it should respond with this response code. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))) })
	@RequestMapping(value = "/vnf_instances/{vnfInstanceId}", produces = { "application/json" }, consumes = { "application/json" }, method = RequestMethod.PATCH)
	default ResponseEntity<Void> vnfInstancesVnfInstanceIdPatch(@Parameter(in = ParameterIn.HEADER, description = "Version of the API requested to use when responding to this request. ", required = true, schema = @Schema()) @RequestHeader(value = "Version", required = true) final String version, @Parameter(in = ParameterIn.PATH, description = "Identifier of the VNF instance. This identifier can be retrieved from the resource referenced by the \"Location\" HTTP header in the response to a POST request creating a new VNF instance resource. It can also be retrieved from the \"id\" attribute in the payload body of that response. ", required = true, schema = @Schema()) @PathVariable("vnfInstanceId") final String vnfInstanceId, @Parameter(in = ParameterIn.DEFAULT, description = "Input parameters for VNF info modification", required = true, schema = @Schema()) @Valid @RequestBody final VnfInfoModificationRequest body, @Parameter(in = ParameterIn.HEADER, description = "The authorization token for the request. Reference: IETF RFC 7235. ", schema = @Schema()) @RequestHeader(value = "Authorization", required = false) final String authorization) {
		if (getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
		} else {
			log.warn("ObjectMapper or HttpServletRequest not configured in default VnfInstancesApi interface so no example is generated");
		}
		return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
	}

	@Operation(summary = "", description = "The POST method requests reverting a VNF/VNFC instance to a VNF/VNFC snapshot. ", tags = {})
	@ApiResponses(value = {
			@ApiResponse(responseCode = "202", description = "202 ACCEPTED Shall be returned when the request was accepted for processing, but the processing has not been completed. The response body shall be empty. The HTTP response shall include a \"Location\" HTTP header that contains the URI of the newly-created \"VNF LCM operation occurrence\" resource corresponding to the operation. "),

			@ApiResponse(responseCode = "400", description = "400 BAD REQUEST 400 code can be returned in the following specified cases, the specific cause has to be proper specified in the \"ProblemDetails\" structure to be returned. If the request is malformed or syntactically incorrect (e.g. if the request URI contains incorrect query parameters or the payload body contains a syntactically incorrect data structure), the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and should include in the \"detail\" attribute more information about the source of the problem. If the response to a GET request which queries a container resource would be so big that the performance of the API producer is adversely affected, and the API producer does not support paging for the affected resource, it shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and should include in the \"detail\" attribute more information about the source of the problem. If there is an application error related to the client's input that cannot be easily mapped to any other HTTP response code (\"catch all error\"), the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and shall include in the \"detail\" attribute more information about the source of the problem. If the request contains a malformed access token, the API producer should respond with this response. The details of the error shall be returned in the WWW Authenticate HTTP header, as defined in IETF RFC 6750 and IETF RFC 7235. The ProblemDetails structure may be provided. The use of this HTTP error response code described above is applicable to the use of the OAuth 2.0 for the authorization of API requests and notifications, as defined in clauses 4.5.3.3 and 4.5.3.4. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "401", description = "401 UNAUTHORIZED If the request contains no access token even though one is required, or if the request contains an authorization token that is invalid (e.g. expired or revoked), the API producer should respond with this response. The details of the error shall be returned in the WWW-Authenticate HTTP header, as defined in IETF RFC 6750 and IETF RFC 7235. The ProblemDetails structure may be provided. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "403", description = "403 FORBIDDEN If the API consumer is not allowed to perform a particular request to a particular resource, the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided. It should include in the \"detail\" attribute information about the source of the problem, and may indicate how to solve it. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "404", description = "404 NOT FOUND If the API producer did not find a current representation for the resource addressed by the URI passed in the request or is not willing to disclose that one exists, it shall respond with this response code. The \"ProblemDetails\" structure may be provided, including in the \"detail\" attribute information about the source of the problem, e.g. a wrong resource URI variable. This response code is not appropriate in case the resource addressed by the URI is a container resource which is designed to contain child resources, but does not contain any child resource at the time the request is received. For a GET request to an existing empty container resource, a typical response contains a 200 OK response code and a payload body with an empty array. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "405", description = "405 METHOD NOT ALLOWED If a particular HTTP method is not supported for a particular resource, the API producer shall respond with this response code. The \"ProblemDetails\" structure may be omitted. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "406", description = "406 NOT ACCEPTABLE If the \"Accept\" HTTP header does not contain at least one name of a content type that is acceptable to the API producer, the API producer shall respond with this response code. The \"ProblemDetails\" structure may be omitted. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "409", description = "409 CONFLICT ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "416", description = "416 Range Not Satisfiable ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "422", description = "422 UNPROCESSABLE ENTITY If the payload body of a request contains syntactically correct data (e.g. well-formed JSON) but the data cannot be processed (e.g. because it fails validation against a schema), the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and should include in the \"detail\" attribute more information about the source of the problem. This error response code is only applicable for methods that have a request body. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "429", description = "429 TOO MANY REQUESTS If the API consumer has sent too many requests in a defined period of time and the API producer is able to detect that condition (\"rate limiting\"), the API producer shall respond with this response code, following the provisions in IETF RFC 6585 [17] for the use of the \"Retry-After\" HTTP header. The \"ProblemDetails\" structure shall be provided and shall include in the \"detail\" attribute more information about the source of the problem. The period of time and allowed number of requests are configured within the API producer by means outside the scope of the present document. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "500", description = "500 INTERNAL SERVER ERROR If there is an application error not related to the client's input that cannot be easily mapped to any other HTTP response code (\"catch all error\"), the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and shall include in the \"detail\" attribute more information about the source of the problem. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "503", description = "503 SERVICE UNAVAILABLE If the API producer encounters an internal overload situation of itself or of a system it relies on, it should respond with this response code, following the provisions in IETF RFC 7231 for the use of the \"Retry-After\" HTTP header and for the alternative to refuse the connection. The \"ProblemDetails\" structure may be omitted. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "504", description = "504 GATEWAY TIMEOUT If the API producer encounters a timeout while waiting for a response from an upstream server (i.e. a server that the API producer communicates with when fulfilling a request), it should respond with this response code. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))) })
	@RequestMapping(value = "/vnf_instances/{vnfInstanceId}/revert_to_snapshot", produces = { "application/json" }, consumes = { "application/json" }, method = RequestMethod.POST)
	default ResponseEntity<Void> vnfInstancesVnfInstanceIdRevertToSnapshotPost(@Parameter(in = ParameterIn.HEADER, description = "Version of the API requested to use when responding to this request. ", required = true, schema = @Schema()) @RequestHeader(value = "Version", required = true) final String version, @Parameter(in = ParameterIn.PATH, description = "Identifier of the VNF instance. This identifier can be retrieved from the resource referenced by the \"Location\" HTTP header in the response to a POST request creating a new VNF instance resource. It can also be retrieved from the \"id\" attribute in the payload body of that response. ", required = true, schema = @Schema()) @PathVariable("vnfInstanceId") final String vnfInstanceId, @Parameter(in = ParameterIn.DEFAULT, description = "Parameters for the Revert-to VNF/VNFC snapshot operation.", required = true, schema = @Schema()) @Valid @RequestBody final RevertToVnfSnapshotRequest body, @Parameter(in = ParameterIn.HEADER, description = "The authorization token for the request. Reference: IETF RFC 7235. ", schema = @Schema()) @RequestHeader(value = "Authorization", required = false) final String authorization) {
		if (getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
		} else {
			log.warn("ObjectMapper or HttpServletRequest not configured in default VnfInstancesApi interface so no example is generated");
		}
		return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
	}

	@Operation(summary = "", description = "The POST method requests to scale a VNF instance resource incrementally. ", tags = {})
	@ApiResponses(value = {
			@ApiResponse(responseCode = "202", description = "202 ACCEPTED The request has been accepted for processing, but the processing has not been completed. The response body shall be empty. The HTTP response shall include a \"Location\" HTTP header that contains the URI of the newly-created \"Individual VNF LCM operation occurrence\" resource corresponding to the operation. "),

			@ApiResponse(responseCode = "400", description = "400 BAD REQUEST 400 code can be returned in the following specified cases, the specific cause has to be proper specified in the \"ProblemDetails\" structure to be returned. If the request is malformed or syntactically incorrect (e.g. if the request URI contains incorrect query parameters or the payload body contains a syntactically incorrect data structure), the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and should include in the \"detail\" attribute more information about the source of the problem. If the response to a GET request which queries a container resource would be so big that the performance of the API producer is adversely affected, and the API producer does not support paging for the affected resource, it shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and should include in the \"detail\" attribute more information about the source of the problem. If there is an application error related to the client's input that cannot be easily mapped to any other HTTP response code (\"catch all error\"), the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and shall include in the \"detail\" attribute more information about the source of the problem. If the request contains a malformed access token, the API producer should respond with this response. The details of the error shall be returned in the WWW Authenticate HTTP header, as defined in IETF RFC 6750 and IETF RFC 7235. The ProblemDetails structure may be provided. The use of this HTTP error response code described above is applicable to the use of the OAuth 2.0 for the authorization of API requests and notifications, as defined in clauses 4.5.3.3 and 4.5.3.4. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "401", description = "401 UNAUTHORIZED If the request contains no access token even though one is required, or if the request contains an authorization token that is invalid (e.g. expired or revoked), the API producer should respond with this response. The details of the error shall be returned in the WWW-Authenticate HTTP header, as defined in IETF RFC 6750 and IETF RFC 7235. The ProblemDetails structure may be provided. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "403", description = "403 FORBIDDEN If the API consumer is not allowed to perform a particular request to a particular resource, the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided. It should include in the \"detail\" attribute information about the source of the problem, and may indicate how to solve it. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "404", description = "404 NOT FOUND If the API producer did not find a current representation for the resource addressed by the URI passed in the request or is not willing to disclose that one exists, it shall respond with this response code. The \"ProblemDetails\" structure may be provided, including in the \"detail\" attribute information about the source of the problem, e.g. a wrong resource URI variable. This response code is not appropriate in case the resource addressed by the URI is a container resource which is designed to contain child resources, but does not contain any child resource at the time the request is received. For a GET request to an existing empty container resource, a typical response contains a 200 OK response code and a payload body with an empty array. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "405", description = "405 METHOD NOT ALLOWED If a particular HTTP method is not supported for a particular resource, the API producer shall respond with this response code. The \"ProblemDetails\" structure may be omitted. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "406", description = "406 NOT ACCEPTABLE If the \"Accept\" HTTP header does not contain at least one name of a content type that is acceptable to the API producer, the API producer shall respond with this response code. The \"ProblemDetails\" structure may be omitted. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "409", description = "409 CONFLICT ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "416", description = "416 Range Not Satisfiable ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "422", description = "422 UNPROCESSABLE ENTITY If the payload body of a request contains syntactically correct data (e.g. well-formed JSON) but the data cannot be processed (e.g. because it fails validation against a schema), the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and should include in the \"detail\" attribute more information about the source of the problem. This error response code is only applicable for methods that have a request body. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "429", description = "429 TOO MANY REQUESTS If the API consumer has sent too many requests in a defined period of time and the API producer is able to detect that condition (\"rate limiting\"), the API producer shall respond with this response code, following the provisions in IETF RFC 6585 [17] for the use of the \"Retry-After\" HTTP header. The \"ProblemDetails\" structure shall be provided and shall include in the \"detail\" attribute more information about the source of the problem. The period of time and allowed number of requests are configured within the API producer by means outside the scope of the present document. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "500", description = "500 INTERNAL SERVER ERROR If there is an application error not related to the client's input that cannot be easily mapped to any other HTTP response code (\"catch all error\"), the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and shall include in the \"detail\" attribute more information about the source of the problem. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "503", description = "503 SERVICE UNAVAILABLE If the API producer encounters an internal overload situation of itself or of a system it relies on, it should respond with this response code, following the provisions in IETF RFC 7231 for the use of the \"Retry-After\" HTTP header and for the alternative to refuse the connection. The \"ProblemDetails\" structure may be omitted. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "504", description = "504 GATEWAY TIMEOUT If the API producer encounters a timeout while waiting for a response from an upstream server (i.e. a server that the API producer communicates with when fulfilling a request), it should respond with this response code. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))) })
	@RequestMapping(value = "/vnf_instances/{vnfInstanceId}/scale", produces = { "application/json" }, consumes = { "application/json" }, method = RequestMethod.POST)
	default ResponseEntity<Void> vnfInstancesVnfInstanceIdScalePost(@Parameter(in = ParameterIn.HEADER, description = "Version of the API requested to use when responding to this request. ", required = true, schema = @Schema()) @RequestHeader(value = "Version", required = true) final String version, @Parameter(in = ParameterIn.PATH, description = "Identifier of the VNF instance. This identifier can be retrieved from the resource referenced by the \"Location\" HTTP header in the response to a POST request creating a new VNF instance resource. It can also be retrieved from the \"id\" attribute in the payload body of that response. ", required = true, schema = @Schema()) @PathVariable("vnfInstanceId") final String vnfInstanceId, @Parameter(in = ParameterIn.DEFAULT, description = "Parameters for the scale VNF operation.", required = true, schema = @Schema()) @Valid @RequestBody final ScaleVnfRequest body, @Parameter(in = ParameterIn.HEADER, description = "The authorization token for the request. Reference: IETF RFC 7235. ", schema = @Schema()) @RequestHeader(value = "Authorization", required = false) final String authorization) {
		if (getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
		} else {
			log.warn("ObjectMapper or HttpServletRequest not configured in default VnfInstancesApi interface so no example is generated");
		}
		return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
	}

	@Operation(summary = "", description = "The POST method requests to scale a VNF instance resource to a target level. ", tags = {})
	@ApiResponses(value = {
			@ApiResponse(responseCode = "202", description = "202 ACCEPTED The request has been accepted for processing, but the processing has not been completed. The response body shall be empty. The HTTP response shall include a \"Location\" HTTP header that contains the URI of the newly-created \"VNF LCM operation occurrence\" resource corresponding to the operation. "),

			@ApiResponse(responseCode = "400", description = "400 BAD REQUEST 400 code can be returned in the following specified cases, the specific cause has to be proper specified in the \"ProblemDetails\" structure to be returned. If the request is malformed or syntactically incorrect (e.g. if the request URI contains incorrect query parameters or the payload body contains a syntactically incorrect data structure), the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and should include in the \"detail\" attribute more information about the source of the problem. If the response to a GET request which queries a container resource would be so big that the performance of the API producer is adversely affected, and the API producer does not support paging for the affected resource, it shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and should include in the \"detail\" attribute more information about the source of the problem. If there is an application error related to the client's input that cannot be easily mapped to any other HTTP response code (\"catch all error\"), the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and shall include in the \"detail\" attribute more information about the source of the problem. If the request contains a malformed access token, the API producer should respond with this response. The details of the error shall be returned in the WWW Authenticate HTTP header, as defined in IETF RFC 6750 and IETF RFC 7235. The ProblemDetails structure may be provided. The use of this HTTP error response code described above is applicable to the use of the OAuth 2.0 for the authorization of API requests and notifications, as defined in clauses 4.5.3.3 and 4.5.3.4. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "401", description = "401 UNAUTHORIZED If the request contains no access token even though one is required, or if the request contains an authorization token that is invalid (e.g. expired or revoked), the API producer should respond with this response. The details of the error shall be returned in the WWW-Authenticate HTTP header, as defined in IETF RFC 6750 and IETF RFC 7235. The ProblemDetails structure may be provided. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "403", description = "403 FORBIDDEN If the API consumer is not allowed to perform a particular request to a particular resource, the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided. It should include in the \"detail\" attribute information about the source of the problem, and may indicate how to solve it. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "404", description = "404 NOT FOUND If the API producer did not find a current representation for the resource addressed by the URI passed in the request or is not willing to disclose that one exists, it shall respond with this response code. The \"ProblemDetails\" structure may be provided, including in the \"detail\" attribute information about the source of the problem, e.g. a wrong resource URI variable. This response code is not appropriate in case the resource addressed by the URI is a container resource which is designed to contain child resources, but does not contain any child resource at the time the request is received. For a GET request to an existing empty container resource, a typical response contains a 200 OK response code and a payload body with an empty array. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "405", description = "405 METHOD NOT ALLOWED If a particular HTTP method is not supported for a particular resource, the API producer shall respond with this response code. The \"ProblemDetails\" structure may be omitted. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "406", description = "406 NOT ACCEPTABLE If the \"Accept\" HTTP header does not contain at least one name of a content type that is acceptable to the API producer, the API producer shall respond with this response code. The \"ProblemDetails\" structure may be omitted. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "409", description = "409 CONFLICT ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "416", description = "416 Range Not Satisfiable ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "422", description = "422 UNPROCESSABLE ENTITY If the payload body of a request contains syntactically correct data (e.g. well-formed JSON) but the data cannot be processed (e.g. because it fails validation against a schema), the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and should include in the \"detail\" attribute more information about the source of the problem. This error response code is only applicable for methods that have a request body. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "429", description = "429 TOO MANY REQUESTS If the API consumer has sent too many requests in a defined period of time and the API producer is able to detect that condition (\"rate limiting\"), the API producer shall respond with this response code, following the provisions in IETF RFC 6585 [17] for the use of the \"Retry-After\" HTTP header. The \"ProblemDetails\" structure shall be provided and shall include in the \"detail\" attribute more information about the source of the problem. The period of time and allowed number of requests are configured within the API producer by means outside the scope of the present document. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "500", description = "500 INTERNAL SERVER ERROR If there is an application error not related to the client's input that cannot be easily mapped to any other HTTP response code (\"catch all error\"), the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and shall include in the \"detail\" attribute more information about the source of the problem. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "503", description = "503 SERVICE UNAVAILABLE If the API producer encounters an internal overload situation of itself or of a system it relies on, it should respond with this response code, following the provisions in IETF RFC 7231 for the use of the \"Retry-After\" HTTP header and for the alternative to refuse the connection. The \"ProblemDetails\" structure may be omitted. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "504", description = "504 GATEWAY TIMEOUT If the API producer encounters a timeout while waiting for a response from an upstream server (i.e. a server that the API producer communicates with when fulfilling a request), it should respond with this response code. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))) })
	@RequestMapping(value = "/vnf_instances/{vnfInstanceId}/scale_to_level", produces = { "application/json" }, consumes = { "application/json" }, method = RequestMethod.POST)
	default ResponseEntity<Void> vnfInstancesVnfInstanceIdScaleToLevelPost(@Parameter(in = ParameterIn.HEADER, description = "Version of the API requested to use when responding to this request. ", required = true, schema = @Schema()) @RequestHeader(value = "Version", required = true) final String version, @Parameter(in = ParameterIn.PATH, description = "Identifier of the VNF instance. This identifier can be retrieved from the resource referenced by the \"Location\" HTTP header in the response to a POST request creating a new VNF instance resource. It can also be retrieved from the \"id\" attribute in the payload body of that response. ", required = true, schema = @Schema()) @PathVariable("vnfInstanceId") final String vnfInstanceId, @Parameter(in = ParameterIn.DEFAULT, description = "Parameters for the scale VNF to Level operation.", required = true, schema = @Schema()) @Valid @RequestBody final ScaleVnfToLevelRequest body, @Parameter(in = ParameterIn.HEADER, description = "The authorization token for the request. Reference: IETF RFC 7235. ", schema = @Schema()) @RequestHeader(value = "Authorization", required = false) final String authorization) {
		if (getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
		} else {
			log.warn("ObjectMapper or HttpServletRequest not configured in default VnfInstancesApi interface so no example is generated");
		}
		return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
	}

	@Operation(summary = "", description = "The POST method triggers the VNFM to terminate a VNF  instance and to request to the VIM the release of its used virtualised resources. ", tags = {})
	@ApiResponses(value = {
			@ApiResponse(responseCode = "202", description = "202 ACCEPTED The request has been accepted for processing. The response body shall be empty. The HTTP response shall include a \"Location\" HTTP header that contains the URI of the newly-created \"Individual VNF LCM operation occurrence\" resource corresponding to the operation. "),

			@ApiResponse(responseCode = "400", description = "400 BAD REQUEST 400 code can be returned in the following specified cases, the specific cause has to be proper specified in the \"ProblemDetails\" structure to be returned. If the request is malformed or syntactically incorrect (e.g. if the request URI contains incorrect query parameters or the payload body contains a syntactically incorrect data structure), the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and should include in the \"detail\" attribute more information about the source of the problem. If the response to a GET request which queries a container resource would be so big that the performance of the API producer is adversely affected, and the API producer does not support paging for the affected resource, it shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and should include in the \"detail\" attribute more information about the source of the problem. If there is an application error related to the client's input that cannot be easily mapped to any other HTTP response code (\"catch all error\"), the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and shall include in the \"detail\" attribute more information about the source of the problem. If the request contains a malformed access token, the API producer should respond with this response. The details of the error shall be returned in the WWW Authenticate HTTP header, as defined in IETF RFC 6750 and IETF RFC 7235. The ProblemDetails structure may be provided. The use of this HTTP error response code described above is applicable to the use of the OAuth 2.0 for the authorization of API requests and notifications, as defined in clauses 4.5.3.3 and 4.5.3.4. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "401", description = "401 UNAUTHORIZED If the request contains no access token even though one is required, or if the request contains an authorization token that is invalid (e.g. expired or revoked), the API producer should respond with this response. The details of the error shall be returned in the WWW-Authenticate HTTP header, as defined in IETF RFC 6750 and IETF RFC 7235. The ProblemDetails structure may be provided. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "403", description = "403 FORBIDDEN If the API consumer is not allowed to perform a particular request to a particular resource, the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided. It should include in the \"detail\" attribute information about the source of the problem, and may indicate how to solve it. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "404", description = "404 NOT FOUND If the API producer did not find a current representation for the resource addressed by the URI passed in the request or is not willing to disclose that one exists, it shall respond with this response code. The \"ProblemDetails\" structure may be provided, including in the \"detail\" attribute information about the source of the problem, e.g. a wrong resource URI variable. This response code is not appropriate in case the resource addressed by the URI is a container resource which is designed to contain child resources, but does not contain any child resource at the time the request is received. For a GET request to an existing empty container resource, a typical response contains a 200 OK response code and a payload body with an empty array. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "405", description = "405 METHOD NOT ALLOWED If a particular HTTP method is not supported for a particular resource, the API producer shall respond with this response code. The \"ProblemDetails\" structure may be omitted. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "406", description = "406 NOT ACCEPTABLE If the \"Accept\" HTTP header does not contain at least one name of a content type that is acceptable to the API producer, the API producer shall respond with this response code. The \"ProblemDetails\" structure may be omitted. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "409", description = "409 CONFLICT ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "416", description = "416 Range Not Satisfiable ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "422", description = "422 UNPROCESSABLE ENTITY If the payload body of a request contains syntactically correct data (e.g. well-formed JSON) but the data cannot be processed (e.g. because it fails validation against a schema), the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and should include in the \"detail\" attribute more information about the source of the problem. This error response code is only applicable for methods that have a request body. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "429", description = "429 TOO MANY REQUESTS If the API consumer has sent too many requests in a defined period of time and the API producer is able to detect that condition (\"rate limiting\"), the API producer shall respond with this response code, following the provisions in IETF RFC 6585 [17] for the use of the \"Retry-After\" HTTP header. The \"ProblemDetails\" structure shall be provided and shall include in the \"detail\" attribute more information about the source of the problem. The period of time and allowed number of requests are configured within the API producer by means outside the scope of the present document. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "500", description = "500 INTERNAL SERVER ERROR If there is an application error not related to the client's input that cannot be easily mapped to any other HTTP response code (\"catch all error\"), the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and shall include in the \"detail\" attribute more information about the source of the problem. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "503", description = "503 SERVICE UNAVAILABLE If the API producer encounters an internal overload situation of itself or of a system it relies on, it should respond with this response code, following the provisions in IETF RFC 7231 for the use of the \"Retry-After\" HTTP header and for the alternative to refuse the connection. The \"ProblemDetails\" structure may be omitted. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "504", description = "504 GATEWAY TIMEOUT If the API producer encounters a timeout while waiting for a response from an upstream server (i.e. a server that the API producer communicates with when fulfilling a request), it should respond with this response code. ", content = @Content(schema = @Schema(implementation = ProblemDetails.class))) })
	@RequestMapping(value = "/vnf_instances/{vnfInstanceId}/terminate", produces = { "application/json" }, consumes = { "application/json" }, method = RequestMethod.POST)
	default ResponseEntity<Void> vnfInstancesVnfInstanceIdTerminatePost(@Parameter(in = ParameterIn.HEADER, description = "Version of the API requested to use when responding to this request. ", required = true, schema = @Schema()) @RequestHeader(value = "Version", required = true) final String version, @Parameter(in = ParameterIn.PATH, description = "Identifier of the VNF instance. This identifier can be retrieved from the resource referenced by the \"Location\" HTTP header in the response to a POST request creating a new VNF instance resource. It can also be retrieved from the \"id\" attribute in the payload body of that response. ", required = true, schema = @Schema()) @PathVariable("vnfInstanceId") final String vnfInstanceId, @Parameter(in = ParameterIn.DEFAULT, description = "Parameters for the VNF termination.", required = true, schema = @Schema()) @Valid @RequestBody final TerminateVnfRequest body, @Parameter(in = ParameterIn.HEADER, description = "The authorization token for the request. Reference: IETF RFC 7235. ", schema = @Schema()) @RequestHeader(value = "Authorization", required = false) final String authorization) {
		if (getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
		} else {
			log.warn("ObjectMapper or HttpServletRequest not configured in default VnfInstancesApi interface so no example is generated");
		}
		return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
	}

}
